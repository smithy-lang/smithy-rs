// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[derive(::std::fmt::Debug)]
pub struct FizzBuzzInput {
    #[allow(missing_docs)] // documentation missing in model
    pub stream: ::aws_smithy_http::event_stream::Receiver<
        crate::model::ValueStream,
        ::aws_smithy_http::event_stream::MessageStreamError,
    >,
}
impl FizzBuzzInput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn stream(
        &self,
    ) -> &::aws_smithy_http::event_stream::Receiver<
        crate::model::ValueStream,
        ::aws_smithy_http::event_stream::MessageStreamError,
    > {
        &self.stream
    }
}
impl FizzBuzzInput {
    /// Creates a new builder-style object to manufacture [`FizzBuzzInput`](crate::input::FizzBuzzInput).
    pub fn builder() -> crate::input::fizz_buzz_input::Builder {
        crate::input::fizz_buzz_input::Builder::default()
    }
}
impl crate::constrained::Constrained for crate::input::FizzBuzzInput {
    type Unconstrained = crate::input::fizz_buzz_input::Builder;
}
/// See [`FizzBuzzInput`](crate::input::FizzBuzzInput).
pub mod fizz_buzz_input {

    #[derive(::std::cmp::PartialEq, ::std::fmt::Debug)]
    /// Holds one variant for each of the ways the builder can fail.
    #[non_exhaustive]
    #[allow(clippy::enum_variant_names)]
    pub enum ConstraintViolation {
        /// `stream` was not provided but it is required when building `FizzBuzzInput`.
        MissingStream,
    }
    impl ::std::fmt::Display for ConstraintViolation {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                ConstraintViolation::MissingStream => write!(
                    f,
                    "`stream` was not provided but it is required when building `FizzBuzzInput`"
                ),
            }
        }
    }
    impl ::std::error::Error for ConstraintViolation {}
    impl ConstraintViolation {
        pub(crate) fn as_validation_exception_field(
            self,
            path: ::std::string::String,
        ) -> crate::model::ValidationExceptionField {
            match self {
            ConstraintViolation::MissingStream => crate::model::ValidationExceptionField {
                                                message: format!("Value at '{}/stream' failed to satisfy constraint: Member must not be null", path),
                                                path: path + "/stream",
                                            },
        }
        }
    }
    impl ::std::convert::From<ConstraintViolation>
        for ::aws_smithy_http_server::protocol::rpc_v2_cbor::rejection::RequestRejection
    {
        fn from(constraint_violation: ConstraintViolation) -> Self {
            let first_validation_exception_field =
                constraint_violation.as_validation_exception_field("".to_owned());
            let validation_exception = crate::error::ValidationException {
                message: format!(
                    "1 validation error detected. {}",
                    &first_validation_exception_field.message
                ),
                field_list: Some(vec![first_validation_exception_field]),
            };
            Self::ConstraintViolation(
                                crate::protocol_serde::shape_validation_exception::ser_validation_exception_error(&validation_exception)
                                    .expect("validation exceptions should never fail to serialize; please file a bug report under https://github.com/smithy-lang/smithy-rs/issues")
                            )
        }
    }
    impl ::std::convert::From<Builder>
        for crate::constrained::MaybeConstrained<crate::input::FizzBuzzInput>
    {
        fn from(builder: Builder) -> Self {
            Self::Unconstrained(builder)
        }
    }
    impl ::std::convert::TryFrom<Builder> for crate::input::FizzBuzzInput {
        type Error = ConstraintViolation;

        fn try_from(builder: Builder) -> ::std::result::Result<Self, Self::Error> {
            builder.build()
        }
    }
    /// A builder for [`FizzBuzzInput`](crate::input::FizzBuzzInput).
    #[derive(::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) stream: ::std::option::Option<
            ::aws_smithy_http::event_stream::Receiver<
                crate::model::ValueStream,
                ::aws_smithy_http::event_stream::MessageStreamError,
            >,
        >,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn stream(
            mut self,
            input: ::aws_smithy_http::event_stream::Receiver<
                crate::model::ValueStream,
                ::aws_smithy_http::event_stream::MessageStreamError,
            >,
        ) -> Self {
            self.stream = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub(crate) fn set_stream(
            mut self,
            input: impl ::std::convert::Into<
                ::aws_smithy_http::event_stream::Receiver<
                    crate::model::ValueStream,
                    ::aws_smithy_http::event_stream::MessageStreamError,
                >,
            >,
        ) -> Self {
            self.stream = Some(input.into());
            self
        }
        /// Consumes the builder and constructs a [`FizzBuzzInput`](crate::input::FizzBuzzInput).
        ///
        /// The builder fails to construct a [`FizzBuzzInput`](crate::input::FizzBuzzInput) if a [`ConstraintViolation`] occurs.
        ///
        pub fn build(self) -> Result<crate::input::FizzBuzzInput, ConstraintViolation> {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(
            self,
        ) -> Result<crate::input::FizzBuzzInput, ConstraintViolation> {
            Ok(crate::input::FizzBuzzInput {
                stream: self.stream.ok_or(ConstraintViolation::MissingStream)?,
            })
        }
    }
}
