use futures_util::StreamExt;

// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub async fn de_fizz_buzz_http_request<B>(
    #[allow(unused_variables)] request: ::http::Request<B>,
) -> std::result::Result<
    crate::input::FizzBuzzInput,
    ::aws_smithy_http_server::protocol::rpc_v2_cbor::rejection::RequestRejection,
>
where
    B: ::aws_smithy_http_server::body::HttpBody + Send,
    B: Into<::aws_smithy_types::byte_stream::ByteStream>,
    B::Data: Send,
    ::aws_smithy_http_server::protocol::rpc_v2_cbor::rejection::RequestRejection:
        From<<B as ::aws_smithy_http_server::body::HttpBody>::Error>,
{
    Ok({
        // TODO: needs to look into the intial request to find if the non-streaming
        // member shapes have been set or not.
        #[allow(unused_mut)]
        let mut input = crate::input::fizz_buzz_input::Builder::default();

        #[allow(unused_variables)]
        let ::aws_smithy_runtime_api::http::RequestParts {
            uri, headers, body, ..
        } = ::aws_smithy_runtime_api::http::Request::try_from(request)?.into_parts();

        // FZ Find / Investigate - Why do we need to read the whole body?

        // println!("Incoming headers");
        // for (h, v) in headers.iter() {
        //     println!("\t{h} = {v}");
        // }

        // tracing::info!("Using ::hyper::body::to_bytes");
        // let bytes = ::hyper::body::to_bytes(body).await?;
        // println!("Incoming bytes");
        // for b in &bytes {
        //     print!("{b:02X}");
        // }
        // println!("");

        // let s = String::from_utf8_lossy(&bytes);
        // println!("{s}");

        if let Some(value) = {
            // let mut body = aws_smithy_types::body::SdkBody::from(bytes);
            Some(
                crate::protocol_serde::shape_fizz_buzz_input::de_stream_payload(
                    &mut body.into().into_inner(),
                    // &mut body,
                )
                .await?,
            )
        } {
            input = input.set_stream(value)
        }

        input.build()?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn ser_fizz_buzz_http_response(
    #[allow(unused_variables)] output: crate::output::FizzBuzzOutput,
) -> std::result::Result<
    ::aws_smithy_http_server::response::Response,
    ::aws_smithy_http_server::protocol::rpc_v2_cbor::rejection::ResponseRejection,
> {
    Ok({
        #[allow(unused_mut)]
        let mut builder = ::http::Response::builder();
        builder = ::aws_smithy_http::header::set_response_header_if_absent(
            builder,
            ::http::header::CONTENT_TYPE,
            "application/cbor",
        );
        builder = ::aws_smithy_http::header::set_response_header_if_absent(
            builder,
            ::http::header::HeaderName::from_static("smithy-protocol"),
            "rpc-v2-cbor",
        );
        let http_status: u16 = 200;
        builder = builder.status(http_status);
        let body = ::aws_smithy_http_server::body::boxed(
            ::aws_smithy_http_server::body::Body::wrap_stream({
                let error_marshaller =
                    crate::event_stream_serde::FizzBuzzStreamErrorMarshaller::new();
                let marshaller = crate::event_stream_serde::FizzBuzzStreamMarshaller::new();
                let signer = ::aws_smithy_eventstream::frame::NoOpSigner {};
                let adapter: ::aws_smithy_http::event_stream::MessageStreamAdapter<_, _> = output
                    .stream
                    .into_body_stream(marshaller, error_marshaller, signer);

                let initial_message = ::aws_smithy_types::event_stream::Message::new_from_parts(
                    vec![
                        ::aws_smithy_types::event_stream::Header::new(
                            ":message-type",
                            ::aws_smithy_types::event_stream::HeaderValue::String("event".into()),
                        ),
                        ::aws_smithy_types::event_stream::Header::new(
                            ":event-type",
                            ::aws_smithy_types::event_stream::HeaderValue::String(
                                "initial-response".into(),
                            ),
                        ),
                        ::aws_smithy_types::event_stream::Header::new(
                            ":content-type",
                            ::aws_smithy_types::event_stream::HeaderValue::String(
                                "application/cbor".into(),
                            ),
                        ),
                    ],
                    vec![0xbf, 0xff], // CBOR empty map payload
                );

                let mut buffer = vec![];
                aws_smithy_eventstream::frame::write_message_to(&initial_message, &mut buffer)
                    .expect("Failed to write initial response to buffer"); // Should handle this more elegantly

                let initial_message_stream = futures_util::stream::iter(vec![Ok(buffer.into())]);
                initial_message_stream.chain(adapter)
            }),
        );
        builder.body(body)?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn ser_fizz_buzz_http_error(
    error: &crate::error::FizzBuzzError,
) -> std::result::Result<
    ::aws_smithy_http_server::response::Response,
    ::aws_smithy_http_server::protocol::rpc_v2_cbor::rejection::ResponseRejection,
> {
    Ok({
        match error {
            crate::error::FizzBuzzError::ValidationException(output) => {
                let payload = crate::protocol_serde::shape_validation_exception::ser_validation_exception_error(output)?;
                #[allow(unused_mut)]
                let mut builder = ::http::Response::builder();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_TYPE,
                    "application/cbor",
                );
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::HeaderName::from_static("smithy-protocol"),
                    "rpc-v2-cbor",
                );
                let content_length = payload.len();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_LENGTH,
                    content_length,
                );
                builder
                    .status(400)
                    .body(::aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::FizzBuzzError::NegativeNumberException(output) => {
                let payload = crate::protocol_serde::shape_negative_number_exception::ser_negative_number_exception_error(output)?;
                #[allow(unused_mut)]
                let mut builder = ::http::Response::builder();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_TYPE,
                    "application/cbor",
                );
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::HeaderName::from_static("smithy-protocol"),
                    "rpc-v2-cbor",
                );
                let content_length = payload.len();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_LENGTH,
                    content_length,
                );
                builder
                    .status(400)
                    .body(::aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::FizzBuzzError::MalformedInputException(output) => {
                let payload = crate::protocol_serde::shape_malformed_input_exception::ser_malformed_input_exception_error(output)?;
                #[allow(unused_mut)]
                let mut builder = ::http::Response::builder();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_TYPE,
                    "application/cbor",
                );
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::HeaderName::from_static("smithy-protocol"),
                    "rpc-v2-cbor",
                );
                let content_length = payload.len();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_LENGTH,
                    content_length,
                );
                builder
                    .status(400)
                    .body(::aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::FizzBuzzError::InternalException(output) => {
                let payload =
                    crate::protocol_serde::shape_internal_exception::ser_internal_exception_error(
                        output,
                    )?;
                #[allow(unused_mut)]
                let mut builder = ::http::Response::builder();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_TYPE,
                    "application/cbor",
                );
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::HeaderName::from_static("smithy-protocol"),
                    "rpc-v2-cbor",
                );
                let content_length = payload.len();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_LENGTH,
                    content_length,
                );
                builder
                    .status(500)
                    .body(::aws_smithy_http_server::body::to_boxed(payload))?
            }
        }
    })
}
