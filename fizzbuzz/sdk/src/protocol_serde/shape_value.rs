// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_value_payload(
    value: &[u8],
) -> ::std::result::Result<crate::model::Value, ::aws_smithy_cbor::decode::DeserializeError> {
    let decoder = &mut ::aws_smithy_cbor::Decoder::new(value);
    crate::protocol_serde::shape_value::de_value(decoder)
}

pub(crate) fn de_value(
    decoder: &mut ::aws_smithy_cbor::Decoder,
) -> ::std::result::Result<crate::model::Value, ::aws_smithy_cbor::decode::DeserializeError> {
    #[allow(clippy::match_single_binding)]
    fn pair(
        mut builder: crate::model::value::Builder,
        decoder: &mut ::aws_smithy_cbor::Decoder,
    ) -> ::std::result::Result<
        crate::model::value::Builder,
        ::aws_smithy_cbor::decode::DeserializeError,
    > {
        builder = match decoder.str()?.as_ref() {
            "value" => {
                ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| {
                    Ok(builder.set_value(decoder.long()?))
                })?
            }
            _ => {
                decoder.skip()?;
                builder
            }
        };
        Ok(builder)
    }

    let mut builder = crate::model::value::Builder::default();

    match decoder.map()? {
        None => loop {
            match decoder.datatype()? {
                ::aws_smithy_cbor::data::Type::Break => {
                    decoder.skip()?;
                    break;
                }
                _ => {
                    builder = pair(builder, decoder)?;
                }
            };
        },
        Some(n) => {
            for _ in 0..n {
                builder = pair(builder, decoder)?;
            }
        }
    };
    #[allow(clippy::needless_question_mark)]
    {
        return Ok(builder.build());
    }
}
