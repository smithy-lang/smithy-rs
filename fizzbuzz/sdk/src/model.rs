// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Describes one specific validation failure for an input member.
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct ValidationExceptionField {
    /// A JSONPointer expression to the structure member whose value failed to satisfy the modeled constraints.
    pub path: ::std::string::String,
    /// A detailed description of the validation failure.
    pub message: ::std::string::String,
}
impl ValidationExceptionField {
    /// A JSONPointer expression to the structure member whose value failed to satisfy the modeled constraints.
    pub fn path(&self) -> &str {
        use std::ops::Deref;
        self.path.deref()
    }
    /// A detailed description of the validation failure.
    pub fn message(&self) -> &str {
        use std::ops::Deref;
        self.message.deref()
    }
}
impl ValidationExceptionField {
    /// Creates a new builder-style object to manufacture [`ValidationExceptionField`](crate::model::ValidationExceptionField).
    pub fn builder() -> crate::model::validation_exception_field::Builder {
        crate::model::validation_exception_field::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum FizzBuzzStream {
    #[allow(missing_docs)] // documentation missing in model
    Buzz(crate::model::BuzzEvent),
    #[allow(missing_docs)] // documentation missing in model
    Fizz(crate::model::FizzEvent),
}
impl FizzBuzzStream {
    /// Tries to convert the enum instance into [`Buzz`](crate::model::FizzBuzzStream::Buzz), extracting the inner [`BuzzEvent`](crate::model::BuzzEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_buzz(&self) -> ::std::result::Result<&crate::model::BuzzEvent, &Self> {
        if let FizzBuzzStream::Buzz(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Buzz`](crate::model::FizzBuzzStream::Buzz).
    pub fn is_buzz(&self) -> bool {
        self.as_buzz().is_ok()
    }
    /// Tries to convert the enum instance into [`Fizz`](crate::model::FizzBuzzStream::Fizz), extracting the inner [`FizzEvent`](crate::model::FizzEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_fizz(&self) -> ::std::result::Result<&crate::model::FizzEvent, &Self> {
        if let FizzBuzzStream::Fizz(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Fizz`](crate::model::FizzBuzzStream::Fizz).
    pub fn is_fizz(&self) -> bool {
        self.as_fizz().is_ok()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct BuzzEvent {
    #[allow(missing_docs)] // documentation missing in model
    pub value: i64,
}
impl BuzzEvent {
    #[allow(missing_docs)] // documentation missing in model
    pub fn value(&self) -> i64 {
        self.value
    }
}
impl BuzzEvent {
    /// Creates a new builder-style object to manufacture [`BuzzEvent`](crate::model::BuzzEvent).
    pub fn builder() -> crate::model::buzz_event::Builder {
        crate::model::buzz_event::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct FizzEvent {
    #[allow(missing_docs)] // documentation missing in model
    pub value: i64,
}
impl FizzEvent {
    #[allow(missing_docs)] // documentation missing in model
    pub fn value(&self) -> i64 {
        self.value
    }
}
impl FizzEvent {
    /// Creates a new builder-style object to manufacture [`FizzEvent`](crate::model::FizzEvent).
    pub fn builder() -> crate::model::fizz_event::Builder {
        crate::model::fizz_event::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum ValueStream {
    #[allow(missing_docs)] // documentation missing in model
    Value(crate::model::Value),
}
impl ValueStream {
    #[allow(irrefutable_let_patterns)]
    /// Tries to convert the enum instance into [`Value`](crate::model::ValueStream::Value), extracting the inner [`Value`](crate::model::Value).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_value(&self) -> ::std::result::Result<&crate::model::Value, &Self> {
        if let ValueStream::Value(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Value`](crate::model::ValueStream::Value).
    pub fn is_value(&self) -> bool {
        self.as_value().is_ok()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct Value {
    #[allow(missing_docs)] // documentation missing in model
    pub value: i64,
}
impl Value {
    #[allow(missing_docs)] // documentation missing in model
    pub fn value(&self) -> i64 {
        self.value
    }
}
impl Value {
    /// Creates a new builder-style object to manufacture [`Value`](crate::model::Value).
    pub fn builder() -> crate::model::value::Builder {
        crate::model::value::Builder::default()
    }
}
impl crate::constrained::Constrained for crate::model::Value {
    type Unconstrained = crate::model::value::Builder;
}
/// See [`ValidationExceptionField`](crate::model::ValidationExceptionField).
pub mod validation_exception_field {

    #[derive(::std::cmp::PartialEq, ::std::fmt::Debug)]
    /// Holds one variant for each of the ways the builder can fail.
    #[non_exhaustive]
    #[allow(clippy::enum_variant_names)]
    pub enum ConstraintViolation {
        /// `path` was not provided but it is required when building `ValidationExceptionField`.
        MissingPath,
        /// `message` was not provided but it is required when building `ValidationExceptionField`.
        MissingMessage,
    }
    impl ::std::fmt::Display for ConstraintViolation {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                ConstraintViolation::MissingPath => write!(f, "`path` was not provided but it is required when building `ValidationExceptionField`"),
                ConstraintViolation::MissingMessage => write!(f, "`message` was not provided but it is required when building `ValidationExceptionField`"),
            }
        }
    }
    impl ::std::error::Error for ConstraintViolation {}
    impl ::std::convert::TryFrom<Builder> for crate::model::ValidationExceptionField {
        type Error = ConstraintViolation;

        fn try_from(builder: Builder) -> ::std::result::Result<Self, Self::Error> {
            builder.build()
        }
    }
    /// A builder for [`ValidationExceptionField`](crate::model::ValidationExceptionField).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) path: ::std::option::Option<::std::string::String>,
        pub(crate) message: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        /// A JSONPointer expression to the structure member whose value failed to satisfy the modeled constraints.
        pub fn path(mut self, input: ::std::string::String) -> Self {
            self.path = Some(input);
            self
        }
        /// A detailed description of the validation failure.
        pub fn message(mut self, input: ::std::string::String) -> Self {
            self.message = Some(input);
            self
        }
        /// Consumes the builder and constructs a [`ValidationExceptionField`](crate::model::ValidationExceptionField).
        ///
        /// The builder fails to construct a [`ValidationExceptionField`](crate::model::ValidationExceptionField) if a [`ConstraintViolation`] occurs.
        ///
        /// If the builder fails, it will return the _first_ encountered [`ConstraintViolation`].
        pub fn build(self) -> Result<crate::model::ValidationExceptionField, ConstraintViolation> {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(
            self,
        ) -> Result<crate::model::ValidationExceptionField, ConstraintViolation> {
            Ok(crate::model::ValidationExceptionField {
                path: self.path.ok_or(ConstraintViolation::MissingPath)?,
                message: self.message.ok_or(ConstraintViolation::MissingMessage)?,
            })
        }
    }
}
/// See [`BuzzEvent`](crate::model::BuzzEvent).
pub mod buzz_event {

    impl ::std::convert::From<Builder> for crate::model::BuzzEvent {
        fn from(builder: Builder) -> Self {
            builder.build()
        }
    }
    /// A builder for [`BuzzEvent`](crate::model::BuzzEvent).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) value: ::std::option::Option<i64>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn value(mut self, input: i64) -> Self {
            self.value = Some(input);
            self
        }
        /// Consumes the builder and constructs a [`BuzzEvent`](crate::model::BuzzEvent).
        pub fn build(self) -> crate::model::BuzzEvent {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(self) -> crate::model::BuzzEvent {
            crate::model::BuzzEvent {
                value: self.value.unwrap_or(0i64),
            }
        }
    }
}
/// See [`FizzEvent`](crate::model::FizzEvent).
pub mod fizz_event {

    impl ::std::convert::From<Builder> for crate::model::FizzEvent {
        fn from(builder: Builder) -> Self {
            builder.build()
        }
    }
    /// A builder for [`FizzEvent`](crate::model::FizzEvent).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) value: ::std::option::Option<i64>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn value(mut self, input: i64) -> Self {
            self.value = Some(input);
            self
        }
        /// Consumes the builder and constructs a [`FizzEvent`](crate::model::FizzEvent).
        pub fn build(self) -> crate::model::FizzEvent {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(self) -> crate::model::FizzEvent {
            crate::model::FizzEvent {
                value: self.value.unwrap_or(0i64),
            }
        }
    }
}
/// See [`Value`](crate::model::Value).
pub mod value {

    impl ::std::convert::From<Builder> for crate::model::Value {
        fn from(builder: Builder) -> Self {
            builder.build()
        }
    }
    /// A builder for [`Value`](crate::model::Value).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) value: ::std::option::Option<i64>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn value(mut self, input: i64) -> Self {
            self.value = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub(crate) fn set_value(mut self, input: impl ::std::convert::Into<i64>) -> Self {
            self.value = Some(input.into());
            self
        }
        /// Consumes the builder and constructs a [`Value`](crate::model::Value).
        pub fn build(self) -> crate::model::Value {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(self) -> crate::model::Value {
            crate::model::Value {
                value: self.value.unwrap_or(0i64),
            }
        }
    }
}
