// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A standard error for input validation failures. This should be thrown by services when a member of the input structure falls outside of the modeled or documented constraints.
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct ValidationException {
    /// A summary of the validation failure.
    pub message: ::std::string::String,
    /// A list of specific failures encountered while validating the input. A member can appear in this list more than once if it failed to satisfy multiple constraints.
    pub field_list: ::std::option::Option<::std::vec::Vec<crate::model::ValidationExceptionField>>,
}
impl ValidationException {
    /// A list of specific failures encountered while validating the input. A member can appear in this list more than once if it failed to satisfy multiple constraints.
    pub fn field_list(&self) -> ::std::option::Option<&[crate::model::ValidationExceptionField]> {
        self.field_list.as_deref()
    }
}
impl ValidationException {
    /// Returns the error message.
    pub fn message(&self) -> &str {
        &self.message
    }
    #[doc(hidden)]
    /// Returns the error name.
    pub fn name(&self) -> &'static str {
        "ValidationException"
    }
}
impl ::std::fmt::Display for ValidationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        ::std::write!(f, "ValidationException")?;
        {
            ::std::write!(f, ": {}", &self.message)?;
        }
        Ok(())
    }
}
impl ::std::error::Error for ValidationException {}
impl ValidationException {
    /// Creates a new builder-style object to manufacture [`ValidationException`](crate::error::ValidationException).
    pub fn builder() -> crate::error::validation_exception::Builder {
        crate::error::validation_exception::Builder::default()
    }
}

/// Error type for the `FizzBuzz` operation.
/// Each variant represents an error that can occur for the `FizzBuzz` operation.
#[derive(::std::fmt::Debug)]
pub enum FizzBuzzError {
    /// A standard error for input validation failures. This should be thrown by services when a member of the input structure falls outside of the modeled or documented constraints.
    ValidationException(crate::error::ValidationException),
    #[allow(missing_docs)] // documentation missing in model
    NegativeNumberException(crate::error::NegativeNumberException),
    #[allow(missing_docs)] // documentation missing in model
    MalformedInputException(crate::error::MalformedInputException),
    #[allow(missing_docs)] // documentation missing in model
    InternalException(crate::error::InternalException),
}
impl ::std::fmt::Display for FizzBuzzError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            FizzBuzzError::ValidationException(_inner) => _inner.fmt(f),
            FizzBuzzError::NegativeNumberException(_inner) => _inner.fmt(f),
            FizzBuzzError::MalformedInputException(_inner) => _inner.fmt(f),
            FizzBuzzError::InternalException(_inner) => _inner.fmt(f),
        }
    }
}
impl FizzBuzzError {
    /// Returns `true` if the error kind is `FizzBuzzError::ValidationException`.
    pub fn is_validation_exception(&self) -> bool {
        matches!(&self, FizzBuzzError::ValidationException(_))
    }
    /// Returns `true` if the error kind is `FizzBuzzError::NegativeNumberException`.
    pub fn is_negative_number_exception(&self) -> bool {
        matches!(&self, FizzBuzzError::NegativeNumberException(_))
    }
    /// Returns `true` if the error kind is `FizzBuzzError::MalformedInputException`.
    pub fn is_malformed_input_exception(&self) -> bool {
        matches!(&self, FizzBuzzError::MalformedInputException(_))
    }
    /// Returns `true` if the error kind is `FizzBuzzError::InternalException`.
    pub fn is_internal_exception(&self) -> bool {
        matches!(&self, FizzBuzzError::InternalException(_))
    }
    /// Returns the error name string by matching the correct variant.
    pub fn name(&self) -> &'static str {
        match &self {
            FizzBuzzError::ValidationException(_inner) => _inner.name(),
            FizzBuzzError::NegativeNumberException(_inner) => _inner.name(),
            FizzBuzzError::MalformedInputException(_inner) => _inner.name(),
            FizzBuzzError::InternalException(_inner) => _inner.name(),
        }
    }
}
impl ::std::error::Error for FizzBuzzError {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match &self {
            FizzBuzzError::ValidationException(_inner) => Some(_inner),
            FizzBuzzError::NegativeNumberException(_inner) => Some(_inner),
            FizzBuzzError::MalformedInputException(_inner) => Some(_inner),
            FizzBuzzError::InternalException(_inner) => Some(_inner),
        }
    }
}
impl ::std::convert::From<crate::error::ValidationException> for crate::error::FizzBuzzError {
    fn from(variant: crate::error::ValidationException) -> crate::error::FizzBuzzError {
        Self::ValidationException(variant)
    }
}
impl ::std::convert::From<crate::error::NegativeNumberException> for crate::error::FizzBuzzError {
    fn from(variant: crate::error::NegativeNumberException) -> crate::error::FizzBuzzError {
        Self::NegativeNumberException(variant)
    }
}
impl ::std::convert::From<crate::error::MalformedInputException> for crate::error::FizzBuzzError {
    fn from(variant: crate::error::MalformedInputException) -> crate::error::FizzBuzzError {
        Self::MalformedInputException(variant)
    }
}
impl ::std::convert::From<crate::error::InternalException> for crate::error::FizzBuzzError {
    fn from(variant: crate::error::InternalException) -> crate::error::FizzBuzzError {
        Self::InternalException(variant)
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct InternalException {
    #[allow(missing_docs)] // documentation missing in model
    pub message: ::std::option::Option<::std::string::String>,
}
impl InternalException {
    /// Returns the error message.
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    #[doc(hidden)]
    /// Returns the error name.
    pub fn name(&self) -> &'static str {
        "InternalException"
    }
}
impl ::std::fmt::Display for InternalException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        ::std::write!(f, "InternalException")?;
        if let ::std::option::Option::Some(inner_1) = &self.message {
            {
                ::std::write!(f, ": {}", inner_1)?;
            }
        }
        Ok(())
    }
}
impl ::std::error::Error for InternalException {}
impl InternalException {
    /// Creates a new builder-style object to manufacture [`InternalException`](crate::error::InternalException).
    pub fn builder() -> crate::error::internal_exception::Builder {
        crate::error::internal_exception::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct MalformedInputException {
    #[allow(missing_docs)] // documentation missing in model
    pub message: ::std::option::Option<::std::string::String>,
}
impl MalformedInputException {
    /// Returns the error message.
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    #[doc(hidden)]
    /// Returns the error name.
    pub fn name(&self) -> &'static str {
        "MalformedInputException"
    }
}
impl ::std::fmt::Display for MalformedInputException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        ::std::write!(f, "MalformedInputException")?;
        if let ::std::option::Option::Some(inner_2) = &self.message {
            {
                ::std::write!(f, ": {}", inner_2)?;
            }
        }
        Ok(())
    }
}
impl ::std::error::Error for MalformedInputException {}
impl MalformedInputException {
    /// Creates a new builder-style object to manufacture [`MalformedInputException`](crate::error::MalformedInputException).
    pub fn builder() -> crate::error::malformed_input_exception::Builder {
        crate::error::malformed_input_exception::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct NegativeNumberException {
    #[allow(missing_docs)] // documentation missing in model
    pub message: ::std::option::Option<::std::string::String>,
}
impl NegativeNumberException {
    /// Returns the error message.
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    #[doc(hidden)]
    /// Returns the error name.
    pub fn name(&self) -> &'static str {
        "NegativeNumberException"
    }
}
impl ::std::fmt::Display for NegativeNumberException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        ::std::write!(f, "NegativeNumberException")?;
        if let ::std::option::Option::Some(inner_3) = &self.message {
            {
                ::std::write!(f, ": {}", inner_3)?;
            }
        }
        Ok(())
    }
}
impl ::std::error::Error for NegativeNumberException {}
impl NegativeNumberException {
    /// Creates a new builder-style object to manufacture [`NegativeNumberException`](crate::error::NegativeNumberException).
    pub fn builder() -> crate::error::negative_number_exception::Builder {
        crate::error::negative_number_exception::Builder::default()
    }
}

/// Error type for the `FizzBuzzStream` operation.
/// Each variant represents an error that can occur for the `FizzBuzzStream` operation.
#[derive(::std::fmt::Debug)]
pub enum FizzBuzzStreamError {
    #[allow(missing_docs)] // documentation missing in model
    NegativeNumberException(crate::error::NegativeNumberException),
    #[allow(missing_docs)] // documentation missing in model
    MalformedInputException(crate::error::MalformedInputException),
    #[allow(missing_docs)] // documentation missing in model
    InternalException(crate::error::InternalException),
}
impl ::std::fmt::Display for FizzBuzzStreamError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            FizzBuzzStreamError::NegativeNumberException(_inner) => _inner.fmt(f),
            FizzBuzzStreamError::MalformedInputException(_inner) => _inner.fmt(f),
            FizzBuzzStreamError::InternalException(_inner) => _inner.fmt(f),
        }
    }
}
impl FizzBuzzStreamError {
    /// Returns `true` if the error kind is `FizzBuzzStreamError::NegativeNumberException`.
    pub fn is_negative_number_exception(&self) -> bool {
        matches!(&self, FizzBuzzStreamError::NegativeNumberException(_))
    }
    /// Returns `true` if the error kind is `FizzBuzzStreamError::MalformedInputException`.
    pub fn is_malformed_input_exception(&self) -> bool {
        matches!(&self, FizzBuzzStreamError::MalformedInputException(_))
    }
    /// Returns `true` if the error kind is `FizzBuzzStreamError::InternalException`.
    pub fn is_internal_exception(&self) -> bool {
        matches!(&self, FizzBuzzStreamError::InternalException(_))
    }
    /// Returns the error name string by matching the correct variant.
    pub fn name(&self) -> &'static str {
        match &self {
            FizzBuzzStreamError::NegativeNumberException(_inner) => _inner.name(),
            FizzBuzzStreamError::MalformedInputException(_inner) => _inner.name(),
            FizzBuzzStreamError::InternalException(_inner) => _inner.name(),
        }
    }
}
impl ::std::error::Error for FizzBuzzStreamError {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match &self {
            FizzBuzzStreamError::NegativeNumberException(_inner) => Some(_inner),
            FizzBuzzStreamError::MalformedInputException(_inner) => Some(_inner),
            FizzBuzzStreamError::InternalException(_inner) => Some(_inner),
        }
    }
}
impl ::std::convert::From<crate::error::NegativeNumberException>
    for crate::error::FizzBuzzStreamError
{
    fn from(variant: crate::error::NegativeNumberException) -> crate::error::FizzBuzzStreamError {
        Self::NegativeNumberException(variant)
    }
}
impl ::std::convert::From<crate::error::MalformedInputException>
    for crate::error::FizzBuzzStreamError
{
    fn from(variant: crate::error::MalformedInputException) -> crate::error::FizzBuzzStreamError {
        Self::MalformedInputException(variant)
    }
}
impl ::std::convert::From<crate::error::InternalException> for crate::error::FizzBuzzStreamError {
    fn from(variant: crate::error::InternalException) -> crate::error::FizzBuzzStreamError {
        Self::InternalException(variant)
    }
}

/// See [`ValidationException`](crate::error::ValidationException).
pub mod validation_exception {

    #[derive(::std::cmp::PartialEq, ::std::fmt::Debug)]
    /// Holds one variant for each of the ways the builder can fail.
    #[non_exhaustive]
    #[allow(clippy::enum_variant_names)]
    pub enum ConstraintViolation {
        /// `message` was not provided but it is required when building `ValidationException`.
        MissingMessage,
    }
    impl ::std::fmt::Display for ConstraintViolation {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                ConstraintViolation::MissingMessage => write!(f, "`message` was not provided but it is required when building `ValidationException`"),
            }
        }
    }
    impl ::std::error::Error for ConstraintViolation {}
    impl ::std::convert::TryFrom<Builder> for crate::error::ValidationException {
        type Error = ConstraintViolation;

        fn try_from(builder: Builder) -> ::std::result::Result<Self, Self::Error> {
            builder.build()
        }
    }
    /// A builder for [`ValidationException`](crate::error::ValidationException).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: ::std::option::Option<::std::string::String>,
        pub(crate) field_list:
            ::std::option::Option<::std::vec::Vec<crate::model::ValidationExceptionField>>,
    }
    impl Builder {
        /// A summary of the validation failure.
        pub fn message(mut self, input: ::std::string::String) -> Self {
            self.message = Some(input);
            self
        }
        /// A list of specific failures encountered while validating the input. A member can appear in this list more than once if it failed to satisfy multiple constraints.
        pub fn field_list(
            mut self,
            input: ::std::option::Option<::std::vec::Vec<crate::model::ValidationExceptionField>>,
        ) -> Self {
            self.field_list = input;
            self
        }
        /// Consumes the builder and constructs a [`ValidationException`](crate::error::ValidationException).
        ///
        /// The builder fails to construct a [`ValidationException`](crate::error::ValidationException) if a [`ConstraintViolation`] occurs.
        ///
        pub fn build(self) -> Result<crate::error::ValidationException, ConstraintViolation> {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(
            self,
        ) -> Result<crate::error::ValidationException, ConstraintViolation> {
            Ok(crate::error::ValidationException {
                message: self.message.ok_or(ConstraintViolation::MissingMessage)?,
                field_list: self.field_list,
            })
        }
    }
}
/// See [`InternalException`](crate::error::InternalException).
pub mod internal_exception {

    impl ::std::convert::From<Builder> for crate::error::InternalException {
        fn from(builder: Builder) -> Self {
            builder.build()
        }
    }
    /// A builder for [`InternalException`](crate::error::InternalException).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`InternalException`](crate::error::InternalException).
        pub fn build(self) -> crate::error::InternalException {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(self) -> crate::error::InternalException {
            crate::error::InternalException {
                message: self.message,
            }
        }
    }
}
/// See [`MalformedInputException`](crate::error::MalformedInputException).
pub mod malformed_input_exception {

    impl ::std::convert::From<Builder> for crate::error::MalformedInputException {
        fn from(builder: Builder) -> Self {
            builder.build()
        }
    }
    /// A builder for [`MalformedInputException`](crate::error::MalformedInputException).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`MalformedInputException`](crate::error::MalformedInputException).
        pub fn build(self) -> crate::error::MalformedInputException {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(self) -> crate::error::MalformedInputException {
            crate::error::MalformedInputException {
                message: self.message,
            }
        }
    }
}
/// See [`NegativeNumberException`](crate::error::NegativeNumberException).
pub mod negative_number_exception {

    impl ::std::convert::From<Builder> for crate::error::NegativeNumberException {
        fn from(builder: Builder) -> Self {
            builder.build()
        }
    }
    /// A builder for [`NegativeNumberException`](crate::error::NegativeNumberException).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`NegativeNumberException`](crate::error::NegativeNumberException).
        pub fn build(self) -> crate::error::NegativeNumberException {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(self) -> crate::error::NegativeNumberException {
            crate::error::NegativeNumberException {
                message: self.message,
            }
        }
    }
}
