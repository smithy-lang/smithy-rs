// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[derive(::std::fmt::Debug)]
pub struct FizzBuzzOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub stream: ::aws_smithy_http::event_stream::EventStreamSender<
        crate::model::FizzBuzzStream,
        crate::error::FizzBuzzStreamError,
    >,
}
impl FizzBuzzOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn stream(
        &self,
    ) -> &::aws_smithy_http::event_stream::EventStreamSender<
        crate::model::FizzBuzzStream,
        crate::error::FizzBuzzStreamError,
    > {
        &self.stream
    }
}
impl FizzBuzzOutput {
    /// Creates a new builder-style object to manufacture [`FizzBuzzOutput`](crate::output::FizzBuzzOutput).
    pub fn builder() -> crate::output::fizz_buzz_output::Builder {
        crate::output::fizz_buzz_output::Builder::default()
    }
}
/// See [`FizzBuzzOutput`](crate::output::FizzBuzzOutput).
pub mod fizz_buzz_output {

    #[derive(::std::cmp::PartialEq, ::std::fmt::Debug)]
    /// Holds one variant for each of the ways the builder can fail.
    #[non_exhaustive]
    #[allow(clippy::enum_variant_names)]
    pub enum ConstraintViolation {
        /// `stream` was not provided but it is required when building `FizzBuzzOutput`.
        MissingStream,
    }
    impl ::std::fmt::Display for ConstraintViolation {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                ConstraintViolation::MissingStream => write!(
                    f,
                    "`stream` was not provided but it is required when building `FizzBuzzOutput`"
                ),
            }
        }
    }
    impl ::std::error::Error for ConstraintViolation {}
    impl ::std::convert::TryFrom<Builder> for crate::output::FizzBuzzOutput {
        type Error = ConstraintViolation;

        fn try_from(builder: Builder) -> ::std::result::Result<Self, Self::Error> {
            builder.build()
        }
    }
    /// A builder for [`FizzBuzzOutput`](crate::output::FizzBuzzOutput).
    #[derive(::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) stream: ::std::option::Option<
            ::aws_smithy_http::event_stream::EventStreamSender<
                crate::model::FizzBuzzStream,
                crate::error::FizzBuzzStreamError,
            >,
        >,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn stream(
            mut self,
            input: ::aws_smithy_http::event_stream::EventStreamSender<
                crate::model::FizzBuzzStream,
                crate::error::FizzBuzzStreamError,
            >,
        ) -> Self {
            self.stream = Some(input);
            self
        }
        /// Consumes the builder and constructs a [`FizzBuzzOutput`](crate::output::FizzBuzzOutput).
        ///
        /// The builder fails to construct a [`FizzBuzzOutput`](crate::output::FizzBuzzOutput) if a [`ConstraintViolation`] occurs.
        ///
        pub fn build(self) -> Result<crate::output::FizzBuzzOutput, ConstraintViolation> {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(
            self,
        ) -> Result<crate::output::FizzBuzzOutput, ConstraintViolation> {
            Ok(crate::output::FizzBuzzOutput {
                stream: self.stream.ok_or(ConstraintViolation::MissingStream)?,
            })
        }
    }
}
