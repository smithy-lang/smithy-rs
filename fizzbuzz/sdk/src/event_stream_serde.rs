// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(Debug)]
pub struct FizzBuzzStreamErrorMarshaller;

impl FizzBuzzStreamErrorMarshaller {
    pub fn new() -> Self {
        FizzBuzzStreamErrorMarshaller
    }
}
impl ::aws_smithy_eventstream::frame::MarshallMessage for FizzBuzzStreamErrorMarshaller {
    type Input = crate::error::FizzBuzzStreamError;
    fn marshall(
        &self,
        _input: Self::Input,
    ) -> std::result::Result<
        ::aws_smithy_types::event_stream::Message,
        ::aws_smithy_eventstream::error::Error,
    > {
        let mut headers = Vec::new();
        headers.push(::aws_smithy_types::event_stream::Header::new(
            ":message-type",
            ::aws_smithy_types::event_stream::HeaderValue::String("exception".into()),
        ));
        let payload = match _input {
            crate::error::FizzBuzzStreamError::NegativeNumberException(inner) => {
                headers.push(::aws_smithy_types::event_stream::Header::new(
                    ":exception-type",
                    ::aws_smithy_types::event_stream::HeaderValue::String(
                        "negativeNumberException".into(),
                    ),
                ));
                headers.push(::aws_smithy_types::event_stream::Header::new(
                    ":content-type",
                    ::aws_smithy_types::event_stream::HeaderValue::String(
                        "application/cbor".into(),
                    ),
                ));
                crate::protocol_serde::shape_negative_number_exception::ser_negative_number_exception_error(&inner)
                                            .map_err(|err| ::aws_smithy_eventstream::error::Error::marshalling(format!("{}", err)))?
            }
            crate::error::FizzBuzzStreamError::MalformedInputException(inner) => {
                headers.push(::aws_smithy_types::event_stream::Header::new(
                    ":exception-type",
                    ::aws_smithy_types::event_stream::HeaderValue::String(
                        "malformedInputException".into(),
                    ),
                ));
                headers.push(::aws_smithy_types::event_stream::Header::new(
                    ":content-type",
                    ::aws_smithy_types::event_stream::HeaderValue::String(
                        "application/cbor".into(),
                    ),
                ));
                crate::protocol_serde::shape_malformed_input_exception::ser_malformed_input_exception_error(&inner)
                                            .map_err(|err| ::aws_smithy_eventstream::error::Error::marshalling(format!("{}", err)))?
            }
            crate::error::FizzBuzzStreamError::InternalException(inner) => {
                headers.push(::aws_smithy_types::event_stream::Header::new(
                    ":exception-type",
                    ::aws_smithy_types::event_stream::HeaderValue::String(
                        "internalException".into(),
                    ),
                ));
                headers.push(::aws_smithy_types::event_stream::Header::new(
                    ":content-type",
                    ::aws_smithy_types::event_stream::HeaderValue::String(
                        "application/cbor".into(),
                    ),
                ));
                crate::protocol_serde::shape_internal_exception::ser_internal_exception_error(
                    &inner,
                )
                .map_err(|err| {
                    ::aws_smithy_eventstream::error::Error::marshalling(format!("{}", err))
                })?
            }
        };

        for h in &headers {
            println!("{h:?}");
        }

        println!("Outgoing bytes");
        for b in &payload {
            print!("{b:02X}");
        }
        println!("");

        Ok(::aws_smithy_types::event_stream::Message::new_from_parts(
            headers, payload,
        ))
    }
}

#[non_exhaustive]
#[derive(Debug)]
pub struct FizzBuzzStreamMarshaller {}

impl FizzBuzzStreamMarshaller {
    pub fn new() -> Self {
        FizzBuzzStreamMarshaller {}
    }
}

impl ::aws_smithy_eventstream::frame::MarshallMessage for FizzBuzzStreamMarshaller {
    type Input = crate::model::FizzBuzzStream;

    fn marshall(
        &self,
        input: Self::Input,
    ) -> std::result::Result<
        ::aws_smithy_types::event_stream::Message,
        ::aws_smithy_eventstream::error::Error,
    > {
        let mut headers = Vec::new();
        headers.push(::aws_smithy_types::event_stream::Header::new(
            ":message-type",
            ::aws_smithy_types::event_stream::HeaderValue::String("event".into()),
        ));
        let payload = match input {
            Self::Input::Fizz(inner) => {
                headers.push(::aws_smithy_types::event_stream::Header::new(
                    ":event-type",
                    ::aws_smithy_types::event_stream::HeaderValue::String("fizz".into()),
                ));
                headers.push(::aws_smithy_types::event_stream::Header::new(
                    ":content-type",
                    ::aws_smithy_types::event_stream::HeaderValue::String(
                        "application/cbor".into(),
                    ),
                ));
                crate::protocol_serde::shape_fizz_buzz_stream::ser_fizz_payload(&inner).map_err(
                    |err| ::aws_smithy_eventstream::error::Error::marshalling(format!("{}", err)),
                )?
            }
            Self::Input::Buzz(inner) => {
                headers.push(::aws_smithy_types::event_stream::Header::new(
                    ":event-type",
                    ::aws_smithy_types::event_stream::HeaderValue::String("buzz".into()),
                ));
                headers.push(::aws_smithy_types::event_stream::Header::new(
                    ":content-type",
                    ::aws_smithy_types::event_stream::HeaderValue::String(
                        "application/cbor".into(),
                    ),
                ));
                crate::protocol_serde::shape_fizz_buzz_stream::ser_buzz_payload(&inner).map_err(
                    |err| ::aws_smithy_eventstream::error::Error::marshalling(format!("{}", err)),
                )?
            }
        };
        Ok(::aws_smithy_types::event_stream::Message::new_from_parts(
            headers, payload,
        ))
    }
}

#[non_exhaustive]
#[derive(Debug)]
pub struct ValueStreamUnmarshaller;

impl ValueStreamUnmarshaller {
    pub fn new() -> Self {
        ValueStreamUnmarshaller
    }
}
impl ::aws_smithy_eventstream::frame::UnmarshallMessage for ValueStreamUnmarshaller {
    type Output = crate::model::ValueStream;
    type Error = ::aws_smithy_http::event_stream::MessageStreamError;
    fn unmarshall(
        &self,
        message: &::aws_smithy_types::event_stream::Message,
    ) -> std::result::Result<
        ::aws_smithy_eventstream::frame::UnmarshalledMessage<Self::Output, Self::Error>,
        ::aws_smithy_eventstream::error::Error,
    > {
        let response_headers = ::aws_smithy_eventstream::smithy::parse_response_headers(message)?;
        match response_headers.message_type.as_str() {
            "event" => match response_headers.smithy_type.as_str() {
                "Value" => {
                    let parsed = crate::protocol_serde::shape_value::de_value_payload(
                        &message.payload()[..],
                    )
                    .map_err(|err| {
                        ::aws_smithy_eventstream::error::Error::unmarshalling(format!(
                            "failed to unmarshall Value: {}",
                            err
                        ))
                    })?;
                    Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Event(
                        crate::model::ValueStream::Value(parsed),
                    ))
                }
                _unknown_variant => {
                    return Err(::aws_smithy_eventstream::error::Error::unmarshalling(
                        format!("unrecognized :event-type: {}", _unknown_variant),
                    ));
                }
            },
            "exception" => {
                return Err(aws_smithy_eventstream::error::Error::unmarshalling(
                    format!(
                        "unrecognized exception: {}",
                        response_headers.smithy_type.as_str()
                    ),
                ));
            }
            value => {
                return Err(::aws_smithy_eventstream::error::Error::unmarshalling(
                    format!("unrecognized :message-type: {}", value),
                ));
            }
        }
    }
}
