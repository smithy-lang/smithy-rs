// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// The service builder for [`SampleService`].
///
/// Constructed via [`SampleService::builder`].
pub struct SampleServiceBuilder<Body, L, HttpPl, ModelPl> {
    sample_operation: Option<::aws_smithy_http_server::routing::Route<Body>>,
    layer: L,
    http_plugin: HttpPl,
    model_plugin: ModelPl,
}

impl<Body, L, HttpPl, ModelPl> SampleServiceBuilder<Body, L, HttpPl, ModelPl> {
    /// Sets the [`SampleOperation`](crate::operation_shape::SampleOperation) operation.
    ///
    /// This should be an async function satisfying the [`Handler`](::aws_smithy_http_server::operation::Handler) trait.
    /// See the [operation module documentation](::aws_smithy_http_server::operation) for more information.
    ///
    /// # Example
    ///
    /// ```no_run
    /// use sdk::{SampleService, SampleServiceConfig};
    ///
    /// use sdk::{input, output, error};
    ///
    /// async fn handler(input: input::SampleOperationInput) -> Result<output::SampleOperationOutput, error::SampleOperationError> {
    ///     todo!()
    /// }
    ///
    /// let config = SampleServiceConfig::builder().build();
    /// let app = SampleService::builder(config)
    ///     .sample_operation(handler)
    ///     /* Set other handlers */
    ///     .build()
    ///     .unwrap();
    /// # let app: SampleService<::aws_smithy_http_server::routing::RoutingService<::aws_smithy_http_server::protocol::rest::router::RestRouter<::aws_smithy_http_server::routing::Route>, ::aws_smithy_http_server::protocol::rest_json_1::RestJson1>> = app;
    /// ```
    ///
                    pub fn sample_operation<HandlerType, HandlerExtractors, UpgradeExtractors>(self, handler: HandlerType) -> Self
                    where
                        HandlerType: ::aws_smithy_http_server::operation::Handler<crate::operation_shape::SampleOperation, HandlerExtractors>,

                        ModelPl: ::aws_smithy_http_server::plugin::Plugin<
                            SampleService<L>,
                            crate::operation_shape::SampleOperation,
                            ::aws_smithy_http_server::operation::IntoService<crate::operation_shape::SampleOperation, HandlerType>
                        >,
                        ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>: ::aws_smithy_http_server::plugin::Plugin<
                            SampleService<L>,
                            crate::operation_shape::SampleOperation,
                            ModelPl::Output
                        >,
                        HttpPl: ::aws_smithy_http_server::plugin::Plugin<
                            SampleService<L>,
                            crate::operation_shape::SampleOperation,
                            <
                                ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>
                                as ::aws_smithy_http_server::plugin::Plugin<
                                    SampleService<L>,
                                    crate::operation_shape::SampleOperation,
                                    ModelPl::Output
                                >
                            >::Output
                        >,

                        HttpPl::Output: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        <HttpPl::Output as ::tower::Service<::http::Request<Body>>>::Future: Send + 'static,

                    {
        use ::aws_smithy_http_server::operation::OperationShapeExt;
        use ::aws_smithy_http_server::plugin::Plugin;
        let svc = crate::operation_shape::SampleOperation::from_handler(handler);
        let svc = self.model_plugin.apply(svc);
        let svc = ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>::new()
            .apply(svc);
        let svc = self.http_plugin.apply(svc);
        self.sample_operation_custom(svc)
    }

    /// Sets the [`SampleOperation`](crate::operation_shape::SampleOperation) operation.
    ///
    /// This should be an async function satisfying the [`Handler`](::aws_smithy_http_server::operation::Handler) trait.
    /// See the [operation module documentation](::aws_smithy_http_server::operation) for more information.
    ///
    /// # Example
    ///
    /// ```no_run
    /// use sdk::{SampleService, SampleServiceConfig};
    ///
    /// use sdk::{input, output, error};
    ///
    /// async fn handler(input: input::SampleOperationInput) -> Result<output::SampleOperationOutput, error::SampleOperationError> {
    ///     todo!()
    /// }
    ///
    /// let config = SampleServiceConfig::builder().build();
    /// let svc = ::tower::util::service_fn(handler);
    /// let app = SampleService::builder(config)
    ///     .sample_operation_service(svc)
    ///     /* Set other handlers */
    ///     .build()
    ///     .unwrap();
    /// # let app: SampleService<::aws_smithy_http_server::routing::RoutingService<::aws_smithy_http_server::protocol::rest::router::RestRouter<::aws_smithy_http_server::routing::Route>, ::aws_smithy_http_server::protocol::rest_json_1::RestJson1>> = app;
    /// ```
    ///
                    pub fn sample_operation_service<S, ServiceExtractors, UpgradeExtractors>(self, service: S) -> Self
                    where
                        S: ::aws_smithy_http_server::operation::OperationService<crate::operation_shape::SampleOperation, ServiceExtractors>,

                        ModelPl: ::aws_smithy_http_server::plugin::Plugin<
                            SampleService<L>,
                            crate::operation_shape::SampleOperation,
                            ::aws_smithy_http_server::operation::Normalize<crate::operation_shape::SampleOperation, S>
                        >,
                        ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>: ::aws_smithy_http_server::plugin::Plugin<
                            SampleService<L>,
                            crate::operation_shape::SampleOperation,
                            ModelPl::Output
                        >,
                        HttpPl: ::aws_smithy_http_server::plugin::Plugin<
                            SampleService<L>,
                            crate::operation_shape::SampleOperation,
                            <
                                ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>
                                as ::aws_smithy_http_server::plugin::Plugin<
                                    SampleService<L>,
                                    crate::operation_shape::SampleOperation,
                                    ModelPl::Output
                                >
                            >::Output
                        >,

                        HttpPl::Output: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        <HttpPl::Output as ::tower::Service<::http::Request<Body>>>::Future: Send + 'static,

                    {
        use ::aws_smithy_http_server::operation::OperationShapeExt;
        use ::aws_smithy_http_server::plugin::Plugin;
        let svc = crate::operation_shape::SampleOperation::from_service(service);
        let svc = self.model_plugin.apply(svc);
        let svc = ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>::new()
            .apply(svc);
        let svc = self.http_plugin.apply(svc);
        self.sample_operation_custom(svc)
    }

    /// Sets the [`SampleOperation`](crate::operation_shape::SampleOperation) to a custom [`Service`](tower::Service).
    /// not constrained by the Smithy contract.
    fn sample_operation_custom<S>(mut self, svc: S) -> Self
    where
        S: ::tower::Service<
                ::http::Request<Body>,
                Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>,
                Error = ::std::convert::Infallible,
            > + Clone
            + Send
            + 'static,
        S::Future: Send + 'static,
    {
        self.sample_operation = Some(::aws_smithy_http_server::routing::Route::new(svc));
        self
    }
}

impl<Body, L, HttpPl, ModelPl> SampleServiceBuilder<Body, L, HttpPl, ModelPl> {
    /// Constructs a [`SampleService`] from the arguments provided to the builder.
    ///
    /// Forgetting to register a handler for one or more operations will result in an error.
    ///
    /// Check out [`SampleServiceBuilder::build_unchecked`] if you'd prefer the service to return status code 500 when an
    /// unspecified route is requested.
    pub fn build(
        self,
    ) -> ::std::result::Result<
        SampleService<
            ::aws_smithy_http_server::routing::RoutingService<
                ::aws_smithy_http_server::protocol::rest::router::RestRouter<L::Service>,
                ::aws_smithy_http_server::protocol::rest_json_1::RestJson1,
            >,
        >,
        MissingOperationsError,
    >
    where
        L: ::tower::Layer<::aws_smithy_http_server::routing::Route<Body>>,
    {
        let router = {
            use ::aws_smithy_http_server::operation::OperationShape;
            let mut missing_operation_names = std::collections::HashMap::new();
            if self.sample_operation.is_none() {
                missing_operation_names.insert(
                    crate::operation_shape::SampleOperation::ID,
                    ".sample_operation()",
                );
            }
            if !missing_operation_names.is_empty() {
                return Err(MissingOperationsError {
                    operation_names2setter_methods: missing_operation_names,
                });
            }
            let unexpected_error_msg = "this should never panic since we are supposed to check beforehand that a handler has been registered for this operation; please file a bug report under https://github.com/smithy-lang/smithy-rs/issues";

            ::aws_smithy_http_server::protocol::rest::router::RestRouter::from_iter([(
                request_specs::sample_operation(),
                self.sample_operation.expect(unexpected_error_msg),
            )])
        };
        let svc = ::aws_smithy_http_server::routing::RoutingService::new(router);
        let svc = svc.map(|s| s.layer(self.layer));
        Ok(SampleService { svc })
    }

    /// Constructs a [`SampleService`] from the arguments provided to the builder.
    /// Operations without a handler default to returning 500 Internal Server Error to the caller.
    ///
    /// Check out [`SampleServiceBuilder::build`] if you'd prefer the builder to fail if one or more operations do
    /// not have a registered handler.
    pub fn build_unchecked(self) -> SampleService<L::Service>
    where
        Body: Send + 'static,
        L: ::tower::Layer<
            ::aws_smithy_http_server::routing::RoutingService<
                ::aws_smithy_http_server::protocol::rest::router::RestRouter<
                    ::aws_smithy_http_server::routing::Route<Body>,
                >,
                ::aws_smithy_http_server::protocol::rest_json_1::RestJson1,
            >,
        >,
    {
        let router = ::aws_smithy_http_server::protocol::rest::router::RestRouter::from_iter([(
            request_specs::sample_operation(),
            self.sample_operation.unwrap_or_else(|| {
                let svc = ::aws_smithy_http_server::operation::MissingFailure::<
                    ::aws_smithy_http_server::protocol::rest_json_1::RestJson1,
                >::default();
                ::aws_smithy_http_server::routing::Route::new(svc)
            }),
        )]);
        let svc = self
            .layer
            .layer(::aws_smithy_http_server::routing::RoutingService::new(
                router,
            ));
        SampleService { svc }
    }
}

/// The error encountered when calling the [`SampleServiceBuilder::build`] method if one or more operation handlers are not
/// specified.
#[derive(Debug)]
pub struct MissingOperationsError {
    operation_names2setter_methods:
        std::collections::HashMap<::aws_smithy_http_server::shape_id::ShapeId, &'static str>,
}

impl std::fmt::Display for MissingOperationsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "You must specify a handler for all operations attached to `SampleService`.\n\
                            We are missing handlers for the following operations:\n",
        )?;
        for operation_name in self.operation_names2setter_methods.keys() {
            writeln!(f, "- {}", operation_name.absolute())?;
        }

        writeln!(f, "\nUse the dedicated methods on `SampleServiceBuilder` to register the missing handlers:")?;
        for setter_name in self.operation_names2setter_methods.values() {
            writeln!(f, "- {}", setter_name)?;
        }
        Ok(())
    }
}

impl std::error::Error for MissingOperationsError {}

mod request_specs {
    pub(super) fn sample_operation() -> ::aws_smithy_http_server::routing::request_spec::RequestSpec
    {
        ::aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                    ::http::Method::POST,
                    ::aws_smithy_http_server::routing::request_spec::UriSpec::new(
                        ::aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                            ::aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
    ::aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("sample")),
]),
                            ::aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
])
                        )
                    ),
                )
    }
}

#[allow(missing_docs)] // documentation missing in model
///
/// See the [root](crate) documentation for more information.
#[derive(Clone)]
pub struct SampleService<
    S = ::aws_smithy_http_server::routing::RoutingService<
        ::aws_smithy_http_server::protocol::rest::router::RestRouter<
            ::aws_smithy_http_server::routing::Route<::aws_smithy_http_server::body::BoxBody>,
        >,
        ::aws_smithy_http_server::protocol::rest_json_1::RestJson1,
    >,
> {
    // This is the router wrapped by layers.
    svc: S,
}

impl SampleService<()> {
    /// Constructs a builder for [`SampleService`].
    /// You must specify a configuration object holding any plugins and layers that should be applied
    /// to the operations in this service.
    pub fn builder<
        Body,
        L,
        HttpPl: ::aws_smithy_http_server::plugin::HttpMarker,
        ModelPl: ::aws_smithy_http_server::plugin::ModelMarker,
    >(
        config: SampleServiceConfig<L, HttpPl, ModelPl>,
    ) -> SampleServiceBuilder<Body, L, HttpPl, ModelPl> {
        SampleServiceBuilder {
            sample_operation: None,
            layer: config.layers,
            http_plugin: config.http_plugins,
            model_plugin: config.model_plugins,
        }
    }

    /// Constructs a builder for [`SampleService`].
    /// You must specify what plugins should be applied to the operations in this service.
    ///
    /// Use [`SampleService::builder_without_plugins`] if you don't need to apply plugins.
    ///
    /// Check out [`HttpPlugins`](::aws_smithy_http_server::plugin::HttpPlugins) and
    /// [`ModelPlugins`](::aws_smithy_http_server::plugin::ModelPlugins) if you need to apply
    /// multiple plugins.
    #[deprecated(
        since = "0.57.0",
        note = "please use the `builder` constructor and register plugins on the `SampleServiceConfig` object instead; see https://github.com/smithy-lang/smithy-rs/discussions/3096"
    )]
    pub fn builder_with_plugins<
        Body,
        HttpPl: ::aws_smithy_http_server::plugin::HttpMarker,
        ModelPl: ::aws_smithy_http_server::plugin::ModelMarker,
    >(
        http_plugin: HttpPl,
        model_plugin: ModelPl,
    ) -> SampleServiceBuilder<Body, ::tower::layer::util::Identity, HttpPl, ModelPl> {
        SampleServiceBuilder {
            sample_operation: None,
            layer: ::tower::layer::util::Identity::new(),
            http_plugin,
            model_plugin,
        }
    }

    /// Constructs a builder for [`SampleService`].
    ///
    /// Use [`SampleService::builder_with_plugins`] if you need to specify plugins.
    #[deprecated(
        since = "0.57.0",
        note = "please use the `builder` constructor instead; see https://github.com/smithy-lang/smithy-rs/discussions/3096"
    )]
    pub fn builder_without_plugins<Body>() -> SampleServiceBuilder<
        Body,
        ::tower::layer::util::Identity,
        ::aws_smithy_http_server::plugin::IdentityPlugin,
        ::aws_smithy_http_server::plugin::IdentityPlugin,
    > {
        Self::builder_with_plugins(
            ::aws_smithy_http_server::plugin::IdentityPlugin,
            ::aws_smithy_http_server::plugin::IdentityPlugin,
        )
    }
}

impl<S> SampleService<S> {
    /// Converts [`SampleService`] into a [`MakeService`](tower::make::MakeService).
    pub fn into_make_service(self) -> ::aws_smithy_http_server::routing::IntoMakeService<Self> {
        ::aws_smithy_http_server::routing::IntoMakeService::new(self)
    }

    /// Converts [`SampleService`] into a [`MakeService`](tower::make::MakeService) with [`ConnectInfo`](::aws_smithy_http_server::request::connect_info::ConnectInfo).
    pub fn into_make_service_with_connect_info<C>(
        self,
    ) -> ::aws_smithy_http_server::routing::IntoMakeServiceWithConnectInfo<Self, C> {
        ::aws_smithy_http_server::routing::IntoMakeServiceWithConnectInfo::new(self)
    }
}

impl<S>
    SampleService<
        ::aws_smithy_http_server::routing::RoutingService<
            ::aws_smithy_http_server::protocol::rest::router::RestRouter<S>,
            ::aws_smithy_http_server::protocol::rest_json_1::RestJson1,
        >,
    >
{
    /// Applies a [`Layer`](::tower::Layer) uniformly to all routes.
    #[deprecated(
        since = "0.57.0",
        note = "please add layers to the `SampleServiceConfig` object instead; see https://github.com/smithy-lang/smithy-rs/discussions/3096"
    )]
    pub fn layer<L>(
        self,
        layer: &L,
    ) -> SampleService<
        ::aws_smithy_http_server::routing::RoutingService<
            ::aws_smithy_http_server::protocol::rest::router::RestRouter<L::Service>,
            ::aws_smithy_http_server::protocol::rest_json_1::RestJson1,
        >,
    >
    where
        L: ::tower::Layer<S>,
    {
        SampleService {
            svc: self.svc.map(|s| s.layer(layer)),
        }
    }

    /// Applies [`Route::new`](::aws_smithy_http_server::routing::Route::new) to all routes.
    ///
    /// This has the effect of erasing all types accumulated via layers.
    pub fn boxed<B>(
        self,
    ) -> SampleService<
        ::aws_smithy_http_server::routing::RoutingService<
            ::aws_smithy_http_server::protocol::rest::router::RestRouter<
                ::aws_smithy_http_server::routing::Route<B>,
            >,
            ::aws_smithy_http_server::protocol::rest_json_1::RestJson1,
        >,
    >
    where
        S: ::tower::Service<
            ::http::Request<B>,
            Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>,
            Error = std::convert::Infallible,
        >,
        S: Clone + Send + 'static,
        S::Future: Send + 'static,
    {
        self.layer(&::tower::layer::layer_fn(
            ::aws_smithy_http_server::routing::Route::new,
        ))
    }
}

impl<S, R> ::tower::Service<R> for SampleService<S>
where
    S: ::tower::Service<R>,
{
    type Response = S::Response;
    type Error = S::Error;
    type Future = S::Future;

    fn poll_ready(
        &mut self,
        cx: &mut std::task::Context,
    ) -> std::task::Poll<::std::result::Result<(), Self::Error>> {
        self.svc.poll_ready(cx)
    }

    fn call(&mut self, request: R) -> Self::Future {
        self.svc.call(request)
    }
}

/// An enumeration of all [operations](https://smithy.io/2.0/spec/service-types.html#operation) in SampleService.
#[allow(clippy::enum_variant_names)]
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
pub enum Operation {
    SampleOperation,
}

impl Operation {
    /// Returns the [operations](https://smithy.io/2.0/spec/service-types.html#operation) [`ShapeId`](::aws_smithy_http_server::shape_id::ShapeId).
    pub fn shape_id(&self) -> ::aws_smithy_http_server::shape_id::ShapeId {
        match self {
            Operation::SampleOperation => ::aws_smithy_http_server::shape_id::ShapeId::new(
                "com.test#SampleOperation",
                "com.test",
                "SampleOperation",
            ),
        }
    }
}
impl<L>
    ::aws_smithy_http_server::service::ContainsOperation<crate::operation_shape::SampleOperation>
    for SampleService<L>
{
    const VALUE: Operation = Operation::SampleOperation;
}

impl<S> ::aws_smithy_http_server::service::ServiceShape for SampleService<S> {
    const ID: ::aws_smithy_http_server::shape_id::ShapeId =
        ::aws_smithy_http_server::shape_id::ShapeId::new(
            "com.test#SampleService",
            "com.test",
            "SampleService",
        );

    const VERSION: Option<&'static str> = Some("2024-03-18");

    type Protocol = ::aws_smithy_http_server::protocol::rest_json_1::RestJson1;

    type Operations = Operation;
}
/// Configuration for the [`SampleService`]. This is the central place where to register and
/// configure [`::tower::Layer`]s, HTTP plugins, and model plugins.
///
/// ```rust,no_run
/// # use sdk::SampleServiceConfig;
/// # use ::aws_smithy_http_server::plugin::IdentityPlugin;
/// # use ::tower::layer::util::Identity;
/// # let authentication_plugin = IdentityPlugin;
/// # let authorization_plugin = IdentityPlugin;
/// # let server_request_id_provider_layer = Identity::new();
/// let config = SampleServiceConfig::builder()
///     // Layers get executed first...
///     .layer(server_request_id_provider_layer)
///     // ...then HTTP plugins...
///     .http_plugin(authentication_plugin)
///     // ...and right after deserialization, model plugins.
///     .model_plugin(authorization_plugin)
///     .build();
/// ```
///
/// See the [`plugin`] system for details.
///
/// [`plugin`]: ::aws_smithy_http_server::plugin
#[derive(::std::fmt::Debug)]
pub struct SampleServiceConfig<L, H, M> {
    layers: L,
    http_plugins: H,
    model_plugins: M,
}

impl SampleServiceConfig<(), (), ()> {
    /// Returns a builder to construct the configuration.
    pub fn builder() -> SampleServiceConfigBuilder<
        ::tower::layer::util::Identity,
        ::aws_smithy_http_server::plugin::IdentityPlugin,
        ::aws_smithy_http_server::plugin::IdentityPlugin,
    > {
        SampleServiceConfigBuilder {
            layers: ::tower::layer::util::Identity::new(),
            http_plugins: ::aws_smithy_http_server::plugin::IdentityPlugin,
            model_plugins: ::aws_smithy_http_server::plugin::IdentityPlugin,
        }
    }
}

/// Builder returned by [`SampleServiceConfig::builder()`].
#[derive(::std::fmt::Debug)]
pub struct SampleServiceConfigBuilder<L, H, M> {
    pub(crate) layers: L,
    pub(crate) http_plugins: H,
    pub(crate) model_plugins: M,
}

impl<L, H, M> SampleServiceConfigBuilder<L, H, M> {
    /// Add a [`::tower::Layer`] to the service.
    pub fn layer<NewLayer>(
        self,
        layer: NewLayer,
    ) -> SampleServiceConfigBuilder<::tower::layer::util::Stack<NewLayer, L>, H, M> {
        SampleServiceConfigBuilder {
            layers: ::tower::layer::util::Stack::new(layer, self.layers),
            http_plugins: self.http_plugins,
            model_plugins: self.model_plugins,
        }
    }

    /// Add a HTTP [plugin] to the service.
    ///
    /// [plugin]: ::aws_smithy_http_server::plugin
    // We eagerly require `NewPlugin: HttpMarker`, despite not really needing it, because compiler
    // errors get _substantially_ better if the user makes a mistake.
    pub fn http_plugin<NewPlugin: ::aws_smithy_http_server::plugin::HttpMarker>(
        self,
        http_plugin: NewPlugin,
    ) -> SampleServiceConfigBuilder<L, ::aws_smithy_http_server::plugin::PluginStack<NewPlugin, H>, M>
    {
        SampleServiceConfigBuilder {
            layers: self.layers,
            http_plugins: ::aws_smithy_http_server::plugin::PluginStack::new(
                http_plugin,
                self.http_plugins,
            ),
            model_plugins: self.model_plugins,
        }
    }

    /// Add a model [plugin] to the service.
    ///
    /// [plugin]: ::aws_smithy_http_server::plugin
    // We eagerly require `NewPlugin: ModelMarker`, despite not really needing it, because compiler
    // errors get _substantially_ better if the user makes a mistake.
    pub fn model_plugin<NewPlugin: ::aws_smithy_http_server::plugin::ModelMarker>(
        self,
        model_plugin: NewPlugin,
    ) -> SampleServiceConfigBuilder<L, H, ::aws_smithy_http_server::plugin::PluginStack<NewPlugin, M>>
    {
        SampleServiceConfigBuilder {
            layers: self.layers,
            http_plugins: self.http_plugins,
            model_plugins: ::aws_smithy_http_server::plugin::PluginStack::new(
                model_plugin,
                self.model_plugins,
            ),
        }
    }

    /// Build the configuration.
    pub fn build(self) -> super::SampleServiceConfig<L, H, M> {
        super::SampleServiceConfig {
            layers: self.layers,
            http_plugins: self.http_plugins,
            model_plugins: self.model_plugins,
        }
    }
}
/// A macro to help with scoping [plugins](crate::server::plugin) to a subset of all operations.
///
/// In contrast to [`crate::server::scope`](crate::server::scope), this macro has knowledge
/// of the service and any operations _not_ specified will be placed in the opposing group.
///
/// # Example
///
/// ```rust
/// scope! {
///     /// Includes [`SampleOperation`], excluding all other operations.
///     struct ScopeA {
///         includes: [SampleOperation]
///     }
/// }
///
/// scope! {
///     /// Excludes [`SampleOperation`], excluding all other operations.
///     struct ScopeB {
///         excludes: [SampleOperation]
///     }
/// }
///
/// # use sdk::server::plugin::{Plugin, Scoped};
/// # use sdk::scope;
/// # struct MockPlugin;
/// # impl<S, Op, T> Plugin<S, Op, T> for MockPlugin { type Output = u32; fn apply(&self, input: T) -> u32 { 3 } }
/// # let scoped_a = Scoped::new::<ScopeA>(MockPlugin);
/// # let scoped_b = Scoped::new::<ScopeB>(MockPlugin);
/// # let a = Plugin::<(), sdk::operation_shape::SampleOperation, u64>::apply(&scoped_a, 6);
/// # let b = Plugin::<(), sdk::operation_shape::SampleOperation, u64>::apply(&scoped_b, 6);
/// # assert_eq!(a, 3_u32);
/// # assert_eq!(b, 6_u64);
/// ```
#[macro_export]
macro_rules! scope {
                    // Completed, render impls
                    (@ $ name: ident, $ contains: ident () ($($ temp: ident)*) ($($ not_member: ident)*)) => {
                        $(
                            impl $ crate::server::plugin::scoped::Membership<$ temp> for $ name {
                                type Contains = $ crate::server::plugin::scoped::$ contains;
                            }
                        )*
                        $(
                            impl $ crate::server::plugin::scoped::Membership<$ not_member> for $ name {
                                type Contains = $ crate::server::plugin::scoped::$ contains;
                            }
                        )*
                    };
                    // All `not_member`s exhausted, move `temp` into `not_member`
                    (@ $ name: ident, $ contains: ident ($($ member: ident)*) ($($ temp: ident)*) ()) => {
                        scope! { @ $ name, $ contains ($($ member)*) () ($($ temp)*) }
                    };

                        // SampleOperation match found, pop from both `member` and `not_member`
                        (@ $ name: ident, $ contains: ident (SampleOperation $($ member: ident)*) ($($ temp: ident)*) (SampleOperation $($ not_member: ident)*)) => {
                            scope! { @ $ name, $ contains ($($ member)*) ($($ temp)*) ($($ not_member)*) }
                        };
                        // SampleOperation match not found, pop from `not_member` into `temp` stack
                        (@ $ name: ident, $ contains: ident (SampleOperation $($ member: ident)*) ($($ temp: ident)*) ($ other: ident $($ not_member: ident)*)) => {
                            scope! { @ $ name, $ contains (SampleOperation $($ member)*) ($ other $($ temp)*) ($($ not_member)*) }
                        };

                    (
                        $(#[$ attrs:meta])*
                        $ vis:vis struct $ name:ident {
                            includes: [$($ include:ident),*]
                        }
                    ) => {
                        use $ crate::operation_shape::*;
                        $ crate::server::scope! {
                            $(#[$ attrs])*
                            $ vis struct $ name {
                                includes: [$($ include),*],
                                excludes: []
                            }
                        }
                        scope! { @ $ name, False ($($ include)*) () (SampleOperation) }
                    };
                    (
                        $(#[$ attrs:meta])*
                        $ vis:vis struct $ name:ident {
                            excludes: [$($ exclude:ident),*]
                        }
                    ) => {
                        use $ crate::operation_shape::*;

                        $ crate::server::scope! {
                            $(#[$ attrs])*
                            $ vis struct $ name {
                                includes: [],
                                excludes: [$($ exclude),*]
                            }
                        }
                        scope! { @ $ name, True ($($ exclude)*) () (SampleOperation) }
                    };
                }
