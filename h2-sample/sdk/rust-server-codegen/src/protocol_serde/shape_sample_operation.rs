// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub async fn de_sample_operation_http_request<B>(
    #[allow(unused_variables)] request: ::http::Request<B>,
) -> std::result::Result<
    crate::input::SampleOperationInput,
    ::aws_smithy_http_server::protocol::rpc_v2_cbor::rejection::RequestRejection,
>
where
    B: ::aws_smithy_http_server::body::HttpBody + Send,
    B::Data: Send,
    ::aws_smithy_http_server::protocol::rpc_v2_cbor::rejection::RequestRejection:
        From<<B as ::aws_smithy_http_server::body::HttpBody>::Error>,
{
    Ok({
        #[allow(unused_mut)]
        let mut input = crate::input::sample_operation_input::Builder::default();
        #[allow(unused_variables)]
        let ::aws_smithy_runtime_api::http::RequestParts {
            uri, headers, body, ..
        } = ::aws_smithy_runtime_api::http::Request::try_from(request)?.into_parts();
        let bytes = ::hyper::body::to_bytes(body).await?;
        if !bytes.is_empty() {
            ::aws_smithy_http_server::protocol::content_type_header_classifier_smithy(
                &headers,
                Some("application/cbor"),
            )?;
            input = crate::protocol_serde::shape_sample_operation::de_sample_operation(
                bytes.as_ref(),
                input,
            )?;
        }
        input.build()?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn ser_sample_operation_http_response(
    #[allow(unused_variables)] output: crate::output::SampleOperationOutput,
) -> std::result::Result<
    ::aws_smithy_http_server::response::Response,
    ::aws_smithy_http_server::protocol::rpc_v2_cbor::rejection::ResponseRejection,
> {
    Ok({
        #[allow(unused_mut)]
        let mut builder = ::http::Response::builder();
        builder = ::aws_smithy_http::header::set_response_header_if_absent(
            builder,
            ::http::header::CONTENT_TYPE,
            "application/cbor",
        );
        builder = ::aws_smithy_http::header::set_response_header_if_absent(
            builder,
            ::http::header::HeaderName::from_static("smithy-protocol"),
            "rpc-v2-cbor",
        );
        let http_status: u16 = 200;
        builder = builder.status(http_status);
        let payload =
            crate::protocol_serde::shape_sample_operation_output::ser_sample_operation_output_output_output(&output)?
        ;
        let content_length = payload.len();
        builder = ::aws_smithy_http::header::set_response_header_if_absent(
            builder,
            ::http::header::CONTENT_LENGTH,
            content_length,
        );
        let body = ::aws_smithy_http_server::body::to_boxed(payload);
        builder.body(body)?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn ser_sample_operation_http_error(
    error: &crate::error::SampleOperationError,
) -> std::result::Result<
    ::aws_smithy_http_server::response::Response,
    ::aws_smithy_http_server::protocol::rpc_v2_cbor::rejection::ResponseRejection,
> {
    Ok({
        match error {
            crate::error::SampleOperationError::ValidationException(output) => {
                let payload = crate::protocol_serde::shape_validation_exception::ser_validation_exception_error(output)?;
                #[allow(unused_mut)]
                let mut builder = ::http::Response::builder();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_TYPE,
                    "application/cbor",
                );
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::HeaderName::from_static("smithy-protocol"),
                    "rpc-v2-cbor",
                );
                let content_length = payload.len();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_LENGTH,
                    content_length,
                );
                builder
                    .status(400)
                    .body(::aws_smithy_http_server::body::to_boxed(payload))?
            }
        }
    })
}

pub(crate) fn de_sample_operation(
    value: &[u8],
    mut builder: crate::input::sample_operation_input::Builder,
) -> ::std::result::Result<
    crate::input::sample_operation_input::Builder,
    ::aws_smithy_cbor::decode::DeserializeError,
> {
    #[allow(clippy::match_single_binding)]
    fn pair(
        mut builder: crate::input::sample_operation_input::Builder,
        decoder: &mut ::aws_smithy_cbor::Decoder,
    ) -> ::std::result::Result<
        crate::input::sample_operation_input::Builder,
        ::aws_smithy_cbor::decode::DeserializeError,
    > {
        builder = match decoder.str()?.as_ref() {
            "inputValue" => builder.set_input_value(decoder.string()?),
            _ => {
                decoder.skip()?;
                builder
            }
        };
        Ok(builder)
    }

    let decoder = &mut ::aws_smithy_cbor::Decoder::new(value);

    match decoder.map()? {
        None => loop {
            match decoder.datatype()? {
                ::aws_smithy_cbor::data::Type::Break => {
                    decoder.skip()?;
                    break;
                }
                _ => {
                    builder = pair(builder, decoder)?;
                }
            };
        },
        Some(n) => {
            for _ in 0..n {
                builder = pair(builder, decoder)?;
            }
        }
    };

    if decoder.position() != value.len() {
        return Err(
            ::aws_smithy_cbor::decode::DeserializeError::expected_end_of_stream(decoder.position()),
        );
    }

    Ok(builder)
}
