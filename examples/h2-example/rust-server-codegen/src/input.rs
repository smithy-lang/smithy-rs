// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct SampleOperationInput {
    #[allow(missing_docs)] // documentation missing in model
    pub input_value: ::std::string::String,
}
impl SampleOperationInput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn input_value(&self) -> &str {
        use std::ops::Deref;
        self.input_value.deref()
    }
}
impl SampleOperationInput {
    /// Creates a new builder-style object to manufacture [`SampleOperationInput`](crate::input::SampleOperationInput).
    pub fn builder() -> crate::input::sample_operation_input::Builder {
        crate::input::sample_operation_input::Builder::default()
    }
}
impl crate::constrained::Constrained for crate::input::SampleOperationInput {
    type Unconstrained = crate::input::sample_operation_input::Builder;
}
/// See [`SampleOperationInput`](crate::input::SampleOperationInput).
pub mod sample_operation_input {

    #[derive(::std::cmp::PartialEq, ::std::fmt::Debug)]
    /// Holds one variant for each of the ways the builder can fail.
    #[non_exhaustive]
    #[allow(clippy::enum_variant_names)]
    pub enum ConstraintViolation {
        /// `input_value` was not provided but it is required when building `SampleOperationInput`.
        MissingInputValue,
    }
    impl ::std::fmt::Display for ConstraintViolation {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                ConstraintViolation::MissingInputValue => write!(f, "`input_value` was not provided but it is required when building `SampleOperationInput`"),
            }
        }
    }
    impl ::std::error::Error for ConstraintViolation {}
    impl ConstraintViolation {
        pub(crate) fn as_validation_exception_field(
            self,
            path: ::std::string::String,
        ) -> crate::model::ValidationExceptionField {
            match self {
            ConstraintViolation::MissingInputValue => crate::model::ValidationExceptionField {
                                                message: format!("Value at '{}/inputValue' failed to satisfy constraint: Member must not be null", path),
                                                path: path + "/inputValue",
                                            },
        }
        }
    }
    impl ::std::convert::From<ConstraintViolation>
        for ::aws_smithy_http_server::protocol::rest_json_1::rejection::RequestRejection
    {
        fn from(constraint_violation: ConstraintViolation) -> Self {
            let first_validation_exception_field =
                constraint_violation.as_validation_exception_field("".to_owned());
            let validation_exception = crate::error::ValidationException {
                message: format!(
                    "1 validation error detected. {}",
                    &first_validation_exception_field.message
                ),
                field_list: Some(vec![first_validation_exception_field]),
            };
            Self::ConstraintViolation(
                                crate::protocol_serde::shape_validation_exception::ser_validation_exception_error(&validation_exception)
                                    .expect("validation exceptions should never fail to serialize; please file a bug report under https://github.com/smithy-lang/smithy-rs/issues")
                            )
        }
    }
    impl ::std::convert::From<Builder>
        for crate::constrained::MaybeConstrained<crate::input::SampleOperationInput>
    {
        fn from(builder: Builder) -> Self {
            Self::Unconstrained(builder)
        }
    }
    impl ::std::convert::TryFrom<Builder> for crate::input::SampleOperationInput {
        type Error = ConstraintViolation;

        fn try_from(builder: Builder) -> ::std::result::Result<Self, Self::Error> {
            builder.build()
        }
    }
    /// A builder for [`SampleOperationInput`](crate::input::SampleOperationInput).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) input_value: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn input_value(mut self, input: ::std::string::String) -> Self {
            self.input_value = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub(crate) fn set_input_value(
            mut self,
            input: impl ::std::convert::Into<::std::string::String>,
        ) -> Self {
            self.input_value = Some(input.into());
            self
        }
        /// Consumes the builder and constructs a [`SampleOperationInput`](crate::input::SampleOperationInput).
        ///
        /// The builder fails to construct a [`SampleOperationInput`](crate::input::SampleOperationInput) if a [`ConstraintViolation`] occurs.
        ///
        pub fn build(self) -> Result<crate::input::SampleOperationInput, ConstraintViolation> {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(
            self,
        ) -> Result<crate::input::SampleOperationInput, ConstraintViolation> {
            Ok(crate::input::SampleOperationInput {
                input_value: self
                    .input_value
                    .ok_or(ConstraintViolation::MissingInputValue)?,
            })
        }
    }
}
