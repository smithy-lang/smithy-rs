// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Retrieve information about your Pokédex.
pub struct GetStorage;

impl ::aws_smithy_http_server::operation::OperationShape for GetStorage {
    const ID: ::aws_smithy_http_server::shape_id::ShapeId =
        ::aws_smithy_http_server::shape_id::ShapeId::new(
            "com.aws.example#GetStorage",
            "com.aws.example",
            "GetStorage",
        );

    type Input = crate::input::GetStorageInput;
    type Output = crate::output::GetStorageOutput;
    type Error = crate::error::GetStorageError;
}

impl ::aws_smithy_http_server::instrumentation::sensitivity::Sensitivity for GetStorage {
    type RequestFmt = ::aws_smithy_http_server::instrumentation::sensitivity::RequestFmt<
        ::aws_smithy_http_server::instrumentation::sensitivity::headers::MakeHeaders<
            fn(
                &::http::header::HeaderName,
            )
                -> ::aws_smithy_http_server::instrumentation::sensitivity::headers::HeaderMarker,
        >,
        ::aws_smithy_http_server::instrumentation::sensitivity::uri::MakeUri<
            ::aws_smithy_http_server::instrumentation::sensitivity::uri::MakeLabel<
                fn(usize) -> bool,
            >,
            ::aws_smithy_http_server::instrumentation::MakeIdentity,
        >,
    >;
    type ResponseFmt = ::aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt<
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
    >;

    fn request_fmt() -> Self::RequestFmt {
        ::aws_smithy_http_server::instrumentation::sensitivity::RequestFmt::new()
            .header({
                |name: &::http::header::HeaderName| {
                    let name_match = matches!(name.as_str(), "passcode");
                    let key_suffix = None;
                    let value = name_match;
                    ::aws_smithy_http_server::instrumentation::sensitivity::headers::HeaderMarker {
                        key_suffix,
                        value,
                    }
                }
            } as fn(&_) -> _)
            .label(
                { |index: usize| matches!(index, 1) } as fn(usize) -> bool,
                None,
            )
    }

    fn response_fmt() -> Self::ResponseFmt {
        ::aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt::new()
    }
}

/// Retrieve information about a Pokémon species.
pub struct GetPokemonSpecies;

impl ::aws_smithy_http_server::operation::OperationShape for GetPokemonSpecies {
    const ID: ::aws_smithy_http_server::shape_id::ShapeId =
        ::aws_smithy_http_server::shape_id::ShapeId::new(
            "com.aws.example#GetPokemonSpecies",
            "com.aws.example",
            "GetPokemonSpecies",
        );

    type Input = crate::input::GetPokemonSpeciesInput;
    type Output = crate::output::GetPokemonSpeciesOutput;
    type Error = crate::error::GetPokemonSpeciesError;
}

impl ::aws_smithy_http_server::instrumentation::sensitivity::Sensitivity for GetPokemonSpecies {
    type RequestFmt = ::aws_smithy_http_server::instrumentation::sensitivity::RequestFmt<
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
        ::aws_smithy_http_server::instrumentation::sensitivity::uri::MakeUri<
            ::aws_smithy_http_server::instrumentation::MakeIdentity,
            ::aws_smithy_http_server::instrumentation::MakeIdentity,
        >,
    >;
    type ResponseFmt = ::aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt<
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
    >;

    fn request_fmt() -> Self::RequestFmt {
        ::aws_smithy_http_server::instrumentation::sensitivity::RequestFmt::new()
    }

    fn response_fmt() -> Self::ResponseFmt {
        ::aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt::new()
    }
}

/// Fetch a radio song from the database and stream it back as a playable audio.
pub struct StreamPokemonRadio;

impl ::aws_smithy_http_server::operation::OperationShape for StreamPokemonRadio {
    const ID: ::aws_smithy_http_server::shape_id::ShapeId =
        ::aws_smithy_http_server::shape_id::ShapeId::new(
            "com.aws.example#StreamPokemonRadio",
            "com.aws.example",
            "StreamPokemonRadio",
        );

    type Input = crate::input::StreamPokemonRadioInput;
    type Output = crate::output::StreamPokemonRadioOutput;
    type Error = std::convert::Infallible;
}

impl ::aws_smithy_http_server::instrumentation::sensitivity::Sensitivity for StreamPokemonRadio {
    type RequestFmt = ::aws_smithy_http_server::instrumentation::sensitivity::RequestFmt<
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
        ::aws_smithy_http_server::instrumentation::sensitivity::uri::MakeUri<
            ::aws_smithy_http_server::instrumentation::MakeIdentity,
            ::aws_smithy_http_server::instrumentation::MakeIdentity,
        >,
    >;
    type ResponseFmt = ::aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt<
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
    >;

    fn request_fmt() -> Self::RequestFmt {
        ::aws_smithy_http_server::instrumentation::sensitivity::RequestFmt::new()
    }

    fn response_fmt() -> Self::ResponseFmt {
        ::aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt::new()
    }
}

/// Health check operation, to check the service is up Not yet a deep check
pub struct CheckHealth;

impl ::aws_smithy_http_server::operation::OperationShape for CheckHealth {
    const ID: ::aws_smithy_http_server::shape_id::ShapeId =
        ::aws_smithy_http_server::shape_id::ShapeId::new(
            "com.aws.example#CheckHealth",
            "com.aws.example",
            "CheckHealth",
        );

    type Input = crate::input::CheckHealthInput;
    type Output = crate::output::CheckHealthOutput;
    type Error = std::convert::Infallible;
}

impl ::aws_smithy_http_server::instrumentation::sensitivity::Sensitivity for CheckHealth {
    type RequestFmt = ::aws_smithy_http_server::instrumentation::sensitivity::RequestFmt<
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
        ::aws_smithy_http_server::instrumentation::sensitivity::uri::MakeUri<
            ::aws_smithy_http_server::instrumentation::MakeIdentity,
            ::aws_smithy_http_server::instrumentation::MakeIdentity,
        >,
    >;
    type ResponseFmt = ::aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt<
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
    >;

    fn request_fmt() -> Self::RequestFmt {
        ::aws_smithy_http_server::instrumentation::sensitivity::RequestFmt::new()
    }

    fn response_fmt() -> Self::ResponseFmt {
        ::aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt::new()
    }
}

/// Capture Pokémons via event streams.
pub struct CapturePokemon;

impl ::aws_smithy_http_server::operation::OperationShape for CapturePokemon {
    const ID: ::aws_smithy_http_server::shape_id::ShapeId =
        ::aws_smithy_http_server::shape_id::ShapeId::new(
            "com.aws.example#CapturePokemon",
            "com.aws.example",
            "CapturePokemon",
        );

    type Input = crate::input::CapturePokemonInput;
    type Output = crate::output::CapturePokemonOutput;
    type Error = crate::error::CapturePokemonError;
}

impl ::aws_smithy_http_server::instrumentation::sensitivity::Sensitivity for CapturePokemon {
    type RequestFmt = ::aws_smithy_http_server::instrumentation::sensitivity::RequestFmt<
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
        ::aws_smithy_http_server::instrumentation::sensitivity::uri::MakeUri<
            ::aws_smithy_http_server::instrumentation::MakeIdentity,
            ::aws_smithy_http_server::instrumentation::MakeIdentity,
        >,
    >;
    type ResponseFmt = ::aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt<
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
    >;

    fn request_fmt() -> Self::RequestFmt {
        ::aws_smithy_http_server::instrumentation::sensitivity::RequestFmt::new()
    }

    fn response_fmt() -> Self::ResponseFmt {
        ::aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt::new()
    }
}

/// DoNothing operation, used to stress test the framework.
pub struct DoNothing;

impl ::aws_smithy_http_server::operation::OperationShape for DoNothing {
    const ID: ::aws_smithy_http_server::shape_id::ShapeId =
        ::aws_smithy_http_server::shape_id::ShapeId::new(
            "com.aws.example#DoNothing",
            "com.aws.example",
            "DoNothing",
        );

    type Input = crate::input::DoNothingInput;
    type Output = crate::output::DoNothingOutput;
    type Error = std::convert::Infallible;
}

impl ::aws_smithy_http_server::instrumentation::sensitivity::Sensitivity for DoNothing {
    type RequestFmt = ::aws_smithy_http_server::instrumentation::sensitivity::RequestFmt<
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
        ::aws_smithy_http_server::instrumentation::sensitivity::uri::MakeUri<
            ::aws_smithy_http_server::instrumentation::MakeIdentity,
            ::aws_smithy_http_server::instrumentation::MakeIdentity,
        >,
    >;
    type ResponseFmt = ::aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt<
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
    >;

    fn request_fmt() -> Self::RequestFmt {
        ::aws_smithy_http_server::instrumentation::sensitivity::RequestFmt::new()
    }

    fn response_fmt() -> Self::ResponseFmt {
        ::aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt::new()
    }
}

/// Retrieve HTTP server statistiscs, such as calls count.
pub struct GetServerStatistics;

impl ::aws_smithy_http_server::operation::OperationShape for GetServerStatistics {
    const ID: ::aws_smithy_http_server::shape_id::ShapeId =
        ::aws_smithy_http_server::shape_id::ShapeId::new(
            "com.aws.example#GetServerStatistics",
            "com.aws.example",
            "GetServerStatistics",
        );

    type Input = crate::input::GetServerStatisticsInput;
    type Output = crate::output::GetServerStatisticsOutput;
    type Error = std::convert::Infallible;
}

impl ::aws_smithy_http_server::instrumentation::sensitivity::Sensitivity for GetServerStatistics {
    type RequestFmt = ::aws_smithy_http_server::instrumentation::sensitivity::RequestFmt<
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
        ::aws_smithy_http_server::instrumentation::sensitivity::uri::MakeUri<
            ::aws_smithy_http_server::instrumentation::MakeIdentity,
            ::aws_smithy_http_server::instrumentation::MakeIdentity,
        >,
    >;
    type ResponseFmt = ::aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt<
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
        ::aws_smithy_http_server::instrumentation::MakeIdentity,
    >;

    fn request_fmt() -> Self::RequestFmt {
        ::aws_smithy_http_server::instrumentation::sensitivity::RequestFmt::new()
    }

    fn response_fmt() -> Self::ResponseFmt {
        ::aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt::new()
    }
}
