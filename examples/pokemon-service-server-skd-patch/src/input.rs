// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A request to access PokÃ©mon storage.
#[derive(::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::hash::Hash)]
pub struct GetStorageInput {
    #[allow(missing_docs)] // documentation missing in model
    pub user: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub passcode: ::std::string::String,
}
impl GetStorageInput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn user(&self) -> &str {
        use std::ops::Deref;
        self.user.deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn passcode(&self) -> &str {
        use std::ops::Deref;
        self.passcode.deref()
    }
}
impl ::std::fmt::Debug for GetStorageInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetStorageInput");
        formatter.field("user", &"*** Sensitive Data Redacted ***");
        formatter.field("passcode", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GetStorageInput {
    /// Creates a new builder-style object to manufacture [`GetStorageInput`](crate::input::GetStorageInput).
    pub fn builder() -> crate::input::get_storage_input::Builder {
        crate::input::get_storage_input::Builder::default()
    }
}
impl crate::constrained::Constrained for crate::input::GetStorageInput {
    type Unconstrained = crate::input::get_storage_input::Builder;
}

#[allow(missing_docs)] // documentation missing in model
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct GetPokemonSpeciesInput {
    #[allow(missing_docs)] // documentation missing in model
    pub name: ::std::string::String,
}
impl GetPokemonSpeciesInput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
}
impl GetPokemonSpeciesInput {
    /// Creates a new builder-style object to manufacture [`GetPokemonSpeciesInput`](crate::input::GetPokemonSpeciesInput).
    pub fn builder() -> crate::input::get_pokemon_species_input::Builder {
        crate::input::get_pokemon_species_input::Builder::default()
    }
}
impl crate::constrained::Constrained for crate::input::GetPokemonSpeciesInput {
    type Unconstrained = crate::input::get_pokemon_species_input::Builder;
}

#[allow(missing_docs)] // documentation missing in model
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct StreamPokemonRadioInput {}
impl StreamPokemonRadioInput {
    /// Creates a new builder-style object to manufacture [`StreamPokemonRadioInput`](crate::input::StreamPokemonRadioInput).
    pub fn builder() -> crate::input::stream_pokemon_radio_input::Builder {
        crate::input::stream_pokemon_radio_input::Builder::default()
    }
}
impl crate::constrained::Constrained for crate::input::StreamPokemonRadioInput {
    type Unconstrained = crate::input::stream_pokemon_radio_input::Builder;
}

#[allow(missing_docs)] // documentation missing in model
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct CheckHealthInput {}
impl CheckHealthInput {
    /// Creates a new builder-style object to manufacture [`CheckHealthInput`](crate::input::CheckHealthInput).
    pub fn builder() -> crate::input::check_health_input::Builder {
        crate::input::check_health_input::Builder::default()
    }
}
impl crate::constrained::Constrained for crate::input::CheckHealthInput {
    type Unconstrained = crate::input::check_health_input::Builder;
}

#[allow(missing_docs)] // documentation missing in model
#[derive(::std::fmt::Debug)]
pub struct CapturePokemonInput {
    #[allow(missing_docs)] // documentation missing in model
    pub events: ::aws_smithy_http::event_stream::Receiver<
        crate::model::AttemptCapturingPokemonEvent,
        crate::error::AttemptCapturingPokemonEventError,
    >,
    #[allow(missing_docs)] // documentation missing in model
    pub region: ::std::string::String,
}
impl CapturePokemonInput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn events(
        &self,
    ) -> &::aws_smithy_http::event_stream::Receiver<
        crate::model::AttemptCapturingPokemonEvent,
        crate::error::AttemptCapturingPokemonEventError,
    > {
        &self.events
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn region(&self) -> &str {
        use std::ops::Deref;
        self.region.deref()
    }
}
impl CapturePokemonInput {
    /// Creates a new builder-style object to manufacture [`CapturePokemonInput`](crate::input::CapturePokemonInput).
    pub fn builder() -> crate::input::capture_pokemon_input::Builder {
        crate::input::capture_pokemon_input::Builder::default()
    }
}
impl crate::constrained::Constrained for crate::input::CapturePokemonInput {
    type Unconstrained = crate::input::capture_pokemon_input::Builder;
}

#[allow(missing_docs)] // documentation missing in model
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct DoNothingInput {}
impl DoNothingInput {
    /// Creates a new builder-style object to manufacture [`DoNothingInput`](crate::input::DoNothingInput).
    pub fn builder() -> crate::input::do_nothing_input::Builder {
        crate::input::do_nothing_input::Builder::default()
    }
}
impl crate::constrained::Constrained for crate::input::DoNothingInput {
    type Unconstrained = crate::input::do_nothing_input::Builder;
}

#[allow(missing_docs)] // documentation missing in model
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct GetServerStatisticsInput {}
impl GetServerStatisticsInput {
    /// Creates a new builder-style object to manufacture [`GetServerStatisticsInput`](crate::input::GetServerStatisticsInput).
    pub fn builder() -> crate::input::get_server_statistics_input::Builder {
        crate::input::get_server_statistics_input::Builder::default()
    }
}
impl crate::constrained::Constrained for crate::input::GetServerStatisticsInput {
    type Unconstrained = crate::input::get_server_statistics_input::Builder;
}
/// See [`GetStorageInput`](crate::input::GetStorageInput).
pub mod get_storage_input {

    #[derive(::std::cmp::PartialEq, ::std::fmt::Debug)]
    /// Holds one variant for each of the ways the builder can fail.
    #[non_exhaustive]
    #[allow(clippy::enum_variant_names)]
    pub enum ConstraintViolation {
        /// `user` was not provided but it is required when building `GetStorageInput`.
        MissingUser,
        /// `passcode` was not provided but it is required when building `GetStorageInput`.
        MissingPasscode,
    }
    impl ::std::fmt::Display for ConstraintViolation {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                ConstraintViolation::MissingUser => write!(f, "`user` was not provided but it is required when building `GetStorageInput`"),
                ConstraintViolation::MissingPasscode => write!(f, "`passcode` was not provided but it is required when building `GetStorageInput`"),
            }
        }
    }
    impl ::std::error::Error for ConstraintViolation {}
    impl ConstraintViolation {
        pub(crate) fn as_validation_exception_field(
            self,
            path: ::std::string::String,
        ) -> crate::model::ValidationExceptionField {
            match self {
            ConstraintViolation::MissingUser => crate::model::ValidationExceptionField {
                                                message: format!("Value at '{}/user' failed to satisfy constraint: Member must not be null", path),
                                                path: path + "/user",
                                            },
            ConstraintViolation::MissingPasscode => crate::model::ValidationExceptionField {
                                                message: format!("Value at '{}/passcode' failed to satisfy constraint: Member must not be null", path),
                                                path: path + "/passcode",
                                            },
        }
        }
    }
    impl ::std::convert::From<ConstraintViolation>
        for ::aws_smithy_http_server::protocol::rest_json_1::rejection::RequestRejection
    {
        fn from(constraint_violation: ConstraintViolation) -> Self {
            let first_validation_exception_field =
                constraint_violation.as_validation_exception_field("".to_owned());
            let validation_exception = crate::error::ValidationException {
                message: format!(
                    "1 validation error detected. {}",
                    &first_validation_exception_field.message
                ),
                field_list: Some(vec![first_validation_exception_field]),
            };
            Self::ConstraintViolation(
                                crate::protocol_serde::shape_validation_exception::ser_validation_exception_error(&validation_exception)
                                    .expect("validation exceptions should never fail to serialize; please file a bug report under https://github.com/smithy-lang/smithy-rs/issues")
                            )
        }
    }
    impl ::std::convert::From<Builder>
        for crate::constrained::MaybeConstrained<crate::input::GetStorageInput>
    {
        fn from(builder: Builder) -> Self {
            Self::Unconstrained(builder)
        }
    }
    impl ::std::convert::TryFrom<Builder> for crate::input::GetStorageInput {
        type Error = ConstraintViolation;

        fn try_from(builder: Builder) -> ::std::result::Result<Self, Self::Error> {
            builder.build()
        }
    }
    /// A builder for [`GetStorageInput`](crate::input::GetStorageInput).
    #[derive(::std::clone::Clone, ::std::default::Default)]
    pub struct Builder {
        pub(crate) user: ::std::option::Option<::std::string::String>,
        pub(crate) passcode: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn user(mut self, input: ::std::string::String) -> Self {
            self.user = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub(crate) fn set_user(
            mut self,
            input: impl ::std::convert::Into<::std::string::String>,
        ) -> Self {
            self.user = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn passcode(mut self, input: ::std::string::String) -> Self {
            self.passcode = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub(crate) fn set_passcode(
            mut self,
            input: impl ::std::convert::Into<::std::string::String>,
        ) -> Self {
            self.passcode = Some(input.into());
            self
        }
        /// Consumes the builder and constructs a [`GetStorageInput`](crate::input::GetStorageInput).
        ///
        /// The builder fails to construct a [`GetStorageInput`](crate::input::GetStorageInput) if a [`ConstraintViolation`] occurs.
        ///
        /// If the builder fails, it will return the _first_ encountered [`ConstraintViolation`].
        pub fn build(self) -> Result<crate::input::GetStorageInput, ConstraintViolation> {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(
            self,
        ) -> Result<crate::input::GetStorageInput, ConstraintViolation> {
            Ok(crate::input::GetStorageInput {
                user: self.user.ok_or(ConstraintViolation::MissingUser)?,
                passcode: self.passcode.ok_or(ConstraintViolation::MissingPasscode)?,
            })
        }
    }
    impl ::std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("user", &self.user);
            formatter.field("passcode", &self.passcode);
            formatter.finish()
        }
    }
}
/// See [`GetPokemonSpeciesInput`](crate::input::GetPokemonSpeciesInput).
pub mod get_pokemon_species_input {

    #[derive(::std::cmp::PartialEq, ::std::fmt::Debug)]
    /// Holds one variant for each of the ways the builder can fail.
    #[non_exhaustive]
    #[allow(clippy::enum_variant_names)]
    pub enum ConstraintViolation {
        /// `name` was not provided but it is required when building `GetPokemonSpeciesInput`.
        MissingName,
    }
    impl ::std::fmt::Display for ConstraintViolation {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                ConstraintViolation::MissingName => write!(f, "`name` was not provided but it is required when building `GetPokemonSpeciesInput`"),
            }
        }
    }
    impl ::std::error::Error for ConstraintViolation {}
    impl ConstraintViolation {
        pub(crate) fn as_validation_exception_field(
            self,
            path: ::std::string::String,
        ) -> crate::model::ValidationExceptionField {
            match self {
                ConstraintViolation::MissingName => crate::model::ValidationExceptionField {
                    message: format!(
                        "Value at '{}/name' failed to satisfy constraint: Member must not be null",
                        path
                    ),
                    path: path + "/name",
                },
            }
        }
    }
    impl ::std::convert::From<ConstraintViolation>
        for ::aws_smithy_http_server::protocol::rest_json_1::rejection::RequestRejection
    {
        fn from(constraint_violation: ConstraintViolation) -> Self {
            let first_validation_exception_field =
                constraint_violation.as_validation_exception_field("".to_owned());
            let validation_exception = crate::error::ValidationException {
                message: format!(
                    "1 validation error detected. {}",
                    &first_validation_exception_field.message
                ),
                field_list: Some(vec![first_validation_exception_field]),
            };
            Self::ConstraintViolation(
                                crate::protocol_serde::shape_validation_exception::ser_validation_exception_error(&validation_exception)
                                    .expect("validation exceptions should never fail to serialize; please file a bug report under https://github.com/smithy-lang/smithy-rs/issues")
                            )
        }
    }
    impl ::std::convert::From<Builder>
        for crate::constrained::MaybeConstrained<crate::input::GetPokemonSpeciesInput>
    {
        fn from(builder: Builder) -> Self {
            Self::Unconstrained(builder)
        }
    }
    impl ::std::convert::TryFrom<Builder> for crate::input::GetPokemonSpeciesInput {
        type Error = ConstraintViolation;

        fn try_from(builder: Builder) -> ::std::result::Result<Self, Self::Error> {
            builder.build()
        }
    }
    /// A builder for [`GetPokemonSpeciesInput`](crate::input::GetPokemonSpeciesInput).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn name(mut self, input: ::std::string::String) -> Self {
            self.name = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub(crate) fn set_name(
            mut self,
            input: impl ::std::convert::Into<::std::string::String>,
        ) -> Self {
            self.name = Some(input.into());
            self
        }
        /// Consumes the builder and constructs a [`GetPokemonSpeciesInput`](crate::input::GetPokemonSpeciesInput).
        ///
        /// The builder fails to construct a [`GetPokemonSpeciesInput`](crate::input::GetPokemonSpeciesInput) if a [`ConstraintViolation`] occurs.
        ///
        pub fn build(self) -> Result<crate::input::GetPokemonSpeciesInput, ConstraintViolation> {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(
            self,
        ) -> Result<crate::input::GetPokemonSpeciesInput, ConstraintViolation> {
            Ok(crate::input::GetPokemonSpeciesInput {
                name: self.name.ok_or(ConstraintViolation::MissingName)?,
            })
        }
    }
}
/// See [`StreamPokemonRadioInput`](crate::input::StreamPokemonRadioInput).
pub mod stream_pokemon_radio_input {

    impl ::std::convert::From<Builder> for crate::input::StreamPokemonRadioInput {
        fn from(builder: Builder) -> Self {
            builder.build()
        }
    }
    /// A builder for [`StreamPokemonRadioInput`](crate::input::StreamPokemonRadioInput).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StreamPokemonRadioInput`](crate::input::StreamPokemonRadioInput).
        pub fn build(self) -> crate::input::StreamPokemonRadioInput {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(self) -> crate::input::StreamPokemonRadioInput {
            crate::input::StreamPokemonRadioInput {}
        }
    }
}
/// See [`CheckHealthInput`](crate::input::CheckHealthInput).
pub mod check_health_input {

    impl ::std::convert::From<Builder> for crate::input::CheckHealthInput {
        fn from(builder: Builder) -> Self {
            builder.build()
        }
    }
    /// A builder for [`CheckHealthInput`](crate::input::CheckHealthInput).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CheckHealthInput`](crate::input::CheckHealthInput).
        pub fn build(self) -> crate::input::CheckHealthInput {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(self) -> crate::input::CheckHealthInput {
            crate::input::CheckHealthInput {}
        }
    }
}
/// See [`CapturePokemonInput`](crate::input::CapturePokemonInput).
pub mod capture_pokemon_input {

    #[derive(::std::cmp::PartialEq, ::std::fmt::Debug)]
    /// Holds one variant for each of the ways the builder can fail.
    #[non_exhaustive]
    #[allow(clippy::enum_variant_names)]
    pub enum ConstraintViolation {
        /// `events` was not provided but it is required when building `CapturePokemonInput`.
        MissingEvents,
        /// `region` was not provided but it is required when building `CapturePokemonInput`.
        MissingRegion,
    }
    impl ::std::fmt::Display for ConstraintViolation {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                ConstraintViolation::MissingEvents => write!(f, "`events` was not provided but it is required when building `CapturePokemonInput`"),
                ConstraintViolation::MissingRegion => write!(f, "`region` was not provided but it is required when building `CapturePokemonInput`"),
            }
        }
    }
    impl ::std::error::Error for ConstraintViolation {}
    impl ConstraintViolation {
        pub(crate) fn as_validation_exception_field(
            self,
            path: ::std::string::String,
        ) -> crate::model::ValidationExceptionField {
            match self {
            ConstraintViolation::MissingEvents => crate::model::ValidationExceptionField {
                                                message: format!("Value at '{}/events' failed to satisfy constraint: Member must not be null", path),
                                                path: path + "/events",
                                            },
            ConstraintViolation::MissingRegion => crate::model::ValidationExceptionField {
                                                message: format!("Value at '{}/region' failed to satisfy constraint: Member must not be null", path),
                                                path: path + "/region",
                                            },
        }
        }
    }
    impl ::std::convert::From<ConstraintViolation>
        for ::aws_smithy_http_server::protocol::rest_json_1::rejection::RequestRejection
    {
        fn from(constraint_violation: ConstraintViolation) -> Self {
            let first_validation_exception_field =
                constraint_violation.as_validation_exception_field("".to_owned());
            let validation_exception = crate::error::ValidationException {
                message: format!(
                    "1 validation error detected. {}",
                    &first_validation_exception_field.message
                ),
                field_list: Some(vec![first_validation_exception_field]),
            };
            Self::ConstraintViolation(
                                crate::protocol_serde::shape_validation_exception::ser_validation_exception_error(&validation_exception)
                                    .expect("validation exceptions should never fail to serialize; please file a bug report under https://github.com/smithy-lang/smithy-rs/issues")
                            )
        }
    }
    impl ::std::convert::From<Builder>
        for crate::constrained::MaybeConstrained<crate::input::CapturePokemonInput>
    {
        fn from(builder: Builder) -> Self {
            Self::Unconstrained(builder)
        }
    }
    impl ::std::convert::TryFrom<Builder> for crate::input::CapturePokemonInput {
        type Error = ConstraintViolation;

        fn try_from(builder: Builder) -> ::std::result::Result<Self, Self::Error> {
            builder.build()
        }
    }
    /// A builder for [`CapturePokemonInput`](crate::input::CapturePokemonInput).
    #[derive(::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) events: ::std::option::Option<
            ::aws_smithy_http::event_stream::Receiver<
                crate::model::AttemptCapturingPokemonEvent,
                crate::error::AttemptCapturingPokemonEventError,
            >,
        >,
        pub(crate) region: ::std::option::Option<::std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn events(
            mut self,
            input: ::aws_smithy_http::event_stream::Receiver<
                crate::model::AttemptCapturingPokemonEvent,
                crate::error::AttemptCapturingPokemonEventError,
            >,
        ) -> Self {
            self.events = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub(crate) fn set_events(
            mut self,
            input: impl ::std::convert::Into<
                ::aws_smithy_http::event_stream::Receiver<
                    crate::model::AttemptCapturingPokemonEvent,
                    crate::error::AttemptCapturingPokemonEventError,
                >,
            >,
        ) -> Self {
            self.events = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn region(mut self, input: ::std::string::String) -> Self {
            self.region = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub(crate) fn set_region(
            mut self,
            input: impl ::std::convert::Into<::std::string::String>,
        ) -> Self {
            self.region = Some(input.into());
            self
        }
        /// Consumes the builder and constructs a [`CapturePokemonInput`](crate::input::CapturePokemonInput).
        ///
        /// The builder fails to construct a [`CapturePokemonInput`](crate::input::CapturePokemonInput) if a [`ConstraintViolation`] occurs.
        ///
        /// If the builder fails, it will return the _first_ encountered [`ConstraintViolation`].
        pub fn build(self) -> Result<crate::input::CapturePokemonInput, ConstraintViolation> {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(
            self,
        ) -> Result<crate::input::CapturePokemonInput, ConstraintViolation> {
            Ok(crate::input::CapturePokemonInput {
                events: self.events.ok_or(ConstraintViolation::MissingEvents)?,
                region: self.region.ok_or(ConstraintViolation::MissingRegion)?,
            })
        }
    }
}
/// See [`DoNothingInput`](crate::input::DoNothingInput).
pub mod do_nothing_input {

    impl ::std::convert::From<Builder> for crate::input::DoNothingInput {
        fn from(builder: Builder) -> Self {
            builder.build()
        }
    }
    /// A builder for [`DoNothingInput`](crate::input::DoNothingInput).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DoNothingInput`](crate::input::DoNothingInput).
        pub fn build(self) -> crate::input::DoNothingInput {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(self) -> crate::input::DoNothingInput {
            crate::input::DoNothingInput {}
        }
    }
}
/// See [`GetServerStatisticsInput`](crate::input::GetServerStatisticsInput).
pub mod get_server_statistics_input {

    impl ::std::convert::From<Builder> for crate::input::GetServerStatisticsInput {
        fn from(builder: Builder) -> Self {
            builder.build()
        }
    }
    /// A builder for [`GetServerStatisticsInput`](crate::input::GetServerStatisticsInput).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`GetServerStatisticsInput`](crate::input::GetServerStatisticsInput).
        pub fn build(self) -> crate::input::GetServerStatisticsInput {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(self) -> crate::input::GetServerStatisticsInput {
            crate::input::GetServerStatisticsInput {}
        }
    }
}
