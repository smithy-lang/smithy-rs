// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Contents of the Pokémon storage.
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct GetStorageOutput {
    /// A list of Pokémon species.
    pub collection: ::std::vec::Vec<::std::string::String>,
}
impl GetStorageOutput {
    /// A list of Pokémon species.
    pub fn collection(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.collection.deref()
    }
}
impl GetStorageOutput {
    /// Creates a new builder-style object to manufacture [`GetStorageOutput`](crate::output::GetStorageOutput).
    pub fn builder() -> crate::output::get_storage_output::Builder {
        crate::output::get_storage_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct GetPokemonSpeciesOutput {
    /// The name for this resource.
    pub name: ::std::string::String,
    /// A list of flavor text entries for this Pokémon species.
    pub flavor_text_entries: ::std::vec::Vec<crate::model::FlavorText>,
}
impl GetPokemonSpeciesOutput {
    /// The name for this resource.
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// A list of flavor text entries for this Pokémon species.
    pub fn flavor_text_entries(&self) -> &[crate::model::FlavorText] {
        use std::ops::Deref;
        self.flavor_text_entries.deref()
    }
}
impl GetPokemonSpeciesOutput {
    /// Creates a new builder-style object to manufacture [`GetPokemonSpeciesOutput`](crate::output::GetPokemonSpeciesOutput).
    pub fn builder() -> crate::output::get_pokemon_species_output::Builder {
        crate::output::get_pokemon_species_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(::std::fmt::Debug)]
pub struct StreamPokemonRadioOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub data: ::aws_smithy_types::byte_stream::ByteStream,
}
impl StreamPokemonRadioOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn data(&self) -> &::aws_smithy_types::byte_stream::ByteStream {
        &self.data
    }
}
impl StreamPokemonRadioOutput {
    /// Creates a new builder-style object to manufacture [`StreamPokemonRadioOutput`](crate::output::StreamPokemonRadioOutput).
    pub fn builder() -> crate::output::stream_pokemon_radio_output::Builder {
        crate::output::stream_pokemon_radio_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct CheckHealthOutput {}
impl CheckHealthOutput {
    /// Creates a new builder-style object to manufacture [`CheckHealthOutput`](crate::output::CheckHealthOutput).
    pub fn builder() -> crate::output::check_health_output::Builder {
        crate::output::check_health_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(::std::fmt::Debug)]
pub struct CapturePokemonOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub events: ::aws_smithy_http::event_stream::EventStreamSender<
        crate::model::CapturePokemonEvents,
        crate::error::CapturePokemonEventsError,
    >,
}
impl CapturePokemonOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn events(
        &self,
    ) -> &::aws_smithy_http::event_stream::EventStreamSender<
        crate::model::CapturePokemonEvents,
        crate::error::CapturePokemonEventsError,
    > {
        &self.events
    }
}
impl CapturePokemonOutput {
    /// Creates a new builder-style object to manufacture [`CapturePokemonOutput`](crate::output::CapturePokemonOutput).
    pub fn builder() -> crate::output::capture_pokemon_output::Builder {
        crate::output::capture_pokemon_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct DoNothingOutput {}
impl DoNothingOutput {
    /// Creates a new builder-style object to manufacture [`DoNothingOutput`](crate::output::DoNothingOutput).
    pub fn builder() -> crate::output::do_nothing_output::Builder {
        crate::output::do_nothing_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct GetServerStatisticsOutput {
    /// The number of calls executed by the server.
    pub calls_count: i64,
}
impl GetServerStatisticsOutput {
    /// The number of calls executed by the server.
    pub fn calls_count(&self) -> i64 {
        self.calls_count
    }
}
impl GetServerStatisticsOutput {
    /// Creates a new builder-style object to manufacture [`GetServerStatisticsOutput`](crate::output::GetServerStatisticsOutput).
    pub fn builder() -> crate::output::get_server_statistics_output::Builder {
        crate::output::get_server_statistics_output::Builder::default()
    }
}
/// See [`GetStorageOutput`](crate::output::GetStorageOutput).
pub mod get_storage_output {

    #[derive(::std::cmp::PartialEq, ::std::fmt::Debug)]
    /// Holds one variant for each of the ways the builder can fail.
    #[non_exhaustive]
    #[allow(clippy::enum_variant_names)]
    pub enum ConstraintViolation {
        /// `collection` was not provided but it is required when building `GetStorageOutput`.
        MissingCollection,
    }
    impl ::std::fmt::Display for ConstraintViolation {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                ConstraintViolation::MissingCollection => write!(f, "`collection` was not provided but it is required when building `GetStorageOutput`"),
            }
        }
    }
    impl ::std::error::Error for ConstraintViolation {}
    impl ::std::convert::TryFrom<Builder> for crate::output::GetStorageOutput {
        type Error = ConstraintViolation;

        fn try_from(builder: Builder) -> ::std::result::Result<Self, Self::Error> {
            builder.build()
        }
    }
    /// A builder for [`GetStorageOutput`](crate::output::GetStorageOutput).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) collection: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    }
    impl Builder {
        /// A list of Pokémon species.
        pub fn collection(mut self, input: ::std::vec::Vec<::std::string::String>) -> Self {
            self.collection = Some(input);
            self
        }
        /// Consumes the builder and constructs a [`GetStorageOutput`](crate::output::GetStorageOutput).
        ///
        /// The builder fails to construct a [`GetStorageOutput`](crate::output::GetStorageOutput) if a [`ConstraintViolation`] occurs.
        ///
        pub fn build(self) -> Result<crate::output::GetStorageOutput, ConstraintViolation> {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(
            self,
        ) -> Result<crate::output::GetStorageOutput, ConstraintViolation> {
            Ok(crate::output::GetStorageOutput {
                collection: self
                    .collection
                    .ok_or(ConstraintViolation::MissingCollection)?,
            })
        }
    }
}
/// See [`GetPokemonSpeciesOutput`](crate::output::GetPokemonSpeciesOutput).
pub mod get_pokemon_species_output {

    #[derive(::std::cmp::PartialEq, ::std::fmt::Debug)]
    /// Holds one variant for each of the ways the builder can fail.
    #[non_exhaustive]
    #[allow(clippy::enum_variant_names)]
    pub enum ConstraintViolation {
        /// `name` was not provided but it is required when building `GetPokemonSpeciesOutput`.
        MissingName,
        /// `flavor_text_entries` was not provided but it is required when building `GetPokemonSpeciesOutput`.
        MissingFlavorTextEntries,
    }
    impl ::std::fmt::Display for ConstraintViolation {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                ConstraintViolation::MissingName => write!(f, "`name` was not provided but it is required when building `GetPokemonSpeciesOutput`"),
                ConstraintViolation::MissingFlavorTextEntries => write!(f, "`flavor_text_entries` was not provided but it is required when building `GetPokemonSpeciesOutput`"),
            }
        }
    }
    impl ::std::error::Error for ConstraintViolation {}
    impl ::std::convert::TryFrom<Builder> for crate::output::GetPokemonSpeciesOutput {
        type Error = ConstraintViolation;

        fn try_from(builder: Builder) -> ::std::result::Result<Self, Self::Error> {
            builder.build()
        }
    }
    /// A builder for [`GetPokemonSpeciesOutput`](crate::output::GetPokemonSpeciesOutput).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: ::std::option::Option<::std::string::String>,
        pub(crate) flavor_text_entries:
            ::std::option::Option<::std::vec::Vec<crate::model::FlavorText>>,
    }
    impl Builder {
        /// The name for this resource.
        pub fn name(mut self, input: ::std::string::String) -> Self {
            self.name = Some(input);
            self
        }
        /// A list of flavor text entries for this Pokémon species.
        pub fn flavor_text_entries(
            mut self,
            input: ::std::vec::Vec<crate::model::FlavorText>,
        ) -> Self {
            self.flavor_text_entries = Some(input);
            self
        }
        /// Consumes the builder and constructs a [`GetPokemonSpeciesOutput`](crate::output::GetPokemonSpeciesOutput).
        ///
        /// The builder fails to construct a [`GetPokemonSpeciesOutput`](crate::output::GetPokemonSpeciesOutput) if a [`ConstraintViolation`] occurs.
        ///
        /// If the builder fails, it will return the _first_ encountered [`ConstraintViolation`].
        pub fn build(self) -> Result<crate::output::GetPokemonSpeciesOutput, ConstraintViolation> {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(
            self,
        ) -> Result<crate::output::GetPokemonSpeciesOutput, ConstraintViolation> {
            Ok(crate::output::GetPokemonSpeciesOutput {
                name: self.name.ok_or(ConstraintViolation::MissingName)?,
                flavor_text_entries: self
                    .flavor_text_entries
                    .ok_or(ConstraintViolation::MissingFlavorTextEntries)?,
            })
        }
    }
}
/// See [`StreamPokemonRadioOutput`](crate::output::StreamPokemonRadioOutput).
pub mod stream_pokemon_radio_output {

    impl ::std::convert::From<Builder> for crate::output::StreamPokemonRadioOutput {
        fn from(builder: Builder) -> Self {
            builder.build()
        }
    }
    /// A builder for [`StreamPokemonRadioOutput`](crate::output::StreamPokemonRadioOutput).
    #[derive(::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) data: ::std::option::Option<::aws_smithy_types::byte_stream::ByteStream>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn data(mut self, input: ::aws_smithy_types::byte_stream::ByteStream) -> Self {
            self.data = Some(input);
            self
        }
        /// Consumes the builder and constructs a [`StreamPokemonRadioOutput`](crate::output::StreamPokemonRadioOutput).
        pub fn build(self) -> crate::output::StreamPokemonRadioOutput {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(self) -> crate::output::StreamPokemonRadioOutput {
            crate::output::StreamPokemonRadioOutput {
                data: self.data.unwrap_or_default(),
            }
        }
    }
}
/// See [`CheckHealthOutput`](crate::output::CheckHealthOutput).
pub mod check_health_output {

    impl ::std::convert::From<Builder> for crate::output::CheckHealthOutput {
        fn from(builder: Builder) -> Self {
            builder.build()
        }
    }
    /// A builder for [`CheckHealthOutput`](crate::output::CheckHealthOutput).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CheckHealthOutput`](crate::output::CheckHealthOutput).
        pub fn build(self) -> crate::output::CheckHealthOutput {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(self) -> crate::output::CheckHealthOutput {
            crate::output::CheckHealthOutput {}
        }
    }
}
/// See [`CapturePokemonOutput`](crate::output::CapturePokemonOutput).
pub mod capture_pokemon_output {

    #[derive(::std::cmp::PartialEq, ::std::fmt::Debug)]
    /// Holds one variant for each of the ways the builder can fail.
    #[non_exhaustive]
    #[allow(clippy::enum_variant_names)]
    pub enum ConstraintViolation {
        /// `events` was not provided but it is required when building `CapturePokemonOutput`.
        MissingEvents,
    }
    impl ::std::fmt::Display for ConstraintViolation {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                ConstraintViolation::MissingEvents => write!(f, "`events` was not provided but it is required when building `CapturePokemonOutput`"),
            }
        }
    }
    impl ::std::error::Error for ConstraintViolation {}
    impl ::std::convert::TryFrom<Builder> for crate::output::CapturePokemonOutput {
        type Error = ConstraintViolation;

        fn try_from(builder: Builder) -> ::std::result::Result<Self, Self::Error> {
            builder.build()
        }
    }
    /// A builder for [`CapturePokemonOutput`](crate::output::CapturePokemonOutput).
    #[derive(::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) events: ::std::option::Option<
            ::aws_smithy_http::event_stream::EventStreamSender<
                crate::model::CapturePokemonEvents,
                crate::error::CapturePokemonEventsError,
            >,
        >,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn events(
            mut self,
            input: ::aws_smithy_http::event_stream::EventStreamSender<
                crate::model::CapturePokemonEvents,
                crate::error::CapturePokemonEventsError,
            >,
        ) -> Self {
            self.events = Some(input);
            self
        }
        /// Consumes the builder and constructs a [`CapturePokemonOutput`](crate::output::CapturePokemonOutput).
        ///
        /// The builder fails to construct a [`CapturePokemonOutput`](crate::output::CapturePokemonOutput) if a [`ConstraintViolation`] occurs.
        ///
        pub fn build(self) -> Result<crate::output::CapturePokemonOutput, ConstraintViolation> {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(
            self,
        ) -> Result<crate::output::CapturePokemonOutput, ConstraintViolation> {
            Ok(crate::output::CapturePokemonOutput {
                events: self.events.ok_or(ConstraintViolation::MissingEvents)?,
            })
        }
    }
}
/// See [`DoNothingOutput`](crate::output::DoNothingOutput).
pub mod do_nothing_output {

    impl ::std::convert::From<Builder> for crate::output::DoNothingOutput {
        fn from(builder: Builder) -> Self {
            builder.build()
        }
    }
    /// A builder for [`DoNothingOutput`](crate::output::DoNothingOutput).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DoNothingOutput`](crate::output::DoNothingOutput).
        pub fn build(self) -> crate::output::DoNothingOutput {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(self) -> crate::output::DoNothingOutput {
            crate::output::DoNothingOutput {}
        }
    }
}
/// See [`GetServerStatisticsOutput`](crate::output::GetServerStatisticsOutput).
pub mod get_server_statistics_output {

    #[derive(::std::cmp::PartialEq, ::std::fmt::Debug)]
    /// Holds one variant for each of the ways the builder can fail.
    #[non_exhaustive]
    #[allow(clippy::enum_variant_names)]
    pub enum ConstraintViolation {
        /// `calls_count` was not provided but it is required when building `GetServerStatisticsOutput`.
        MissingCallsCount,
    }
    impl ::std::fmt::Display for ConstraintViolation {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                ConstraintViolation::MissingCallsCount => write!(f, "`calls_count` was not provided but it is required when building `GetServerStatisticsOutput`"),
            }
        }
    }
    impl ::std::error::Error for ConstraintViolation {}
    impl ::std::convert::TryFrom<Builder> for crate::output::GetServerStatisticsOutput {
        type Error = ConstraintViolation;

        fn try_from(builder: Builder) -> ::std::result::Result<Self, Self::Error> {
            builder.build()
        }
    }
    /// A builder for [`GetServerStatisticsOutput`](crate::output::GetServerStatisticsOutput).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) calls_count: ::std::option::Option<i64>,
    }
    impl Builder {
        /// The number of calls executed by the server.
        pub fn calls_count(mut self, input: i64) -> Self {
            self.calls_count = Some(input);
            self
        }
        /// Consumes the builder and constructs a [`GetServerStatisticsOutput`](crate::output::GetServerStatisticsOutput).
        ///
        /// The builder fails to construct a [`GetServerStatisticsOutput`](crate::output::GetServerStatisticsOutput) if a [`ConstraintViolation`] occurs.
        ///
        pub fn build(
            self,
        ) -> Result<crate::output::GetServerStatisticsOutput, ConstraintViolation> {
            self.build_enforcing_all_constraints()
        }
        fn build_enforcing_all_constraints(
            self,
        ) -> Result<crate::output::GetServerStatisticsOutput, ConstraintViolation> {
            Ok(crate::output::GetServerStatisticsOutput {
                calls_count: self
                    .calls_count
                    .ok_or(ConstraintViolation::MissingCallsCount)?,
            })
        }
    }
}
