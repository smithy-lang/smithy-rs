// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_master_ball_unsuccessful_error(
    value: &crate::error::MasterBallUnsuccessful,
) -> ::std::result::Result<String, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = ::std::string::String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_master_ball_unsuccessful::ser_master_ball_unsuccessful(
        &mut object,
        value,
    )?;
    object.finish();
    Ok(out)
}

pub fn ser_master_ball_unsuccessful(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::MasterBallUnsuccessful,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.message {
        object.key("message").string(var_1.as_str());
    }
    Ok(())
}

pub(crate) fn de_master_ball_unsuccessful_json_err(
    value: &[u8],
    mut builder: crate::error::master_ball_unsuccessful::Builder,
) -> ::std::result::Result<
    crate::error::master_ball_unsuccessful::Builder,
    ::aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned =
        ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value))
            .peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                match key.to_unescaped()?.as_ref() {
                    "message" => {
                        builder = builder.set_message(
                            ::aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                }
            }
            other => {
                return Err(
                    ::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                        "expected object key or end object, found: {:?}",
                        other
                    )),
                )
            }
        }
    }
    if tokens.next().is_some() {
        return Err(
            ::aws_smithy_json::deserialize::error::DeserializeError::custom(
                "found more JSON tokens after completing parsing",
            ),
        );
    }
    Ok(builder)
}
