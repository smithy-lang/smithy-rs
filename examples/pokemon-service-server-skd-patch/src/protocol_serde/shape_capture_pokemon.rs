// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub async fn de_capture_pokemon_http_request<B>(
    #[allow(unused_variables)] request: ::http::Request<B>,
) -> std::result::Result<
    crate::input::CapturePokemonInput,
    ::aws_smithy_http_server::protocol::rest_json_1::rejection::RequestRejection,
>
where
    B: ::aws_smithy_http_server::body::HttpBody + Send,
    // TODO: PATCH - Changed from Into<ByteStream> to http-body 1.x constraint for hyper 1.x compatibility
    B: http_body_1_0::Body<Data = bytes::Bytes> + Send + Sync + 'static,
    B::Error: Into<::aws_smithy_types::body::Error> + 'static,
    B::Data: Send,
    ::aws_smithy_http_server::protocol::rest_json_1::rejection::RequestRejection:
        From<<B as ::aws_smithy_http_server::body::HttpBody>::Error>,
{
    Ok({
        #[allow(unused_mut)]
        let mut input = crate::input::capture_pokemon_input::Builder::default();
        #[allow(unused_variables)]
        let ::aws_smithy_runtime_api::http::RequestParts {
            uri, headers, body, ..
        } = ::aws_smithy_runtime_api::http::Request::try_from(request)?.into_parts();
        if let Some(value) = {
            Some(
                crate::protocol_serde::shape_capture_pokemon_input::de_events_payload(
                    // TODO: PATCH - Use from_body_1_x for hyper 1.x compatibility instead of body.into()
                    // This works with any http-body 1.x compatible body type
                    &mut ::aws_smithy_types::byte_stream::ByteStream::from_body_1_x(body).into_inner(),
                )?,
            )
        } {
            input = input.set_events(value)
        }
        let input_string = uri.path();
        let (input_string, (_, m1)) =
            ::nom::sequence::tuple::<_, _, ::nom::error::Error<&str>, _>((
                ::nom::sequence::preceded(
                    ::nom::bytes::complete::tag("/"),
                    ::nom::bytes::complete::tag::<_, _, ::nom::error::Error<&str>>(
                        "capture-pokemon-event",
                    ),
                ),
                ::nom::sequence::preceded(
                    ::nom::bytes::complete::tag("/"),
                    ::nom::branch::alt::<_, _, ::nom::error::Error<&str>, _>((
                        ::nom::bytes::complete::take_until("/"),
                        ::nom::combinator::rest,
                    )),
                ),
            ))(input_string)?;
        debug_assert_eq!("", input_string);
        input =
            input.set_region(crate::protocol_serde::shape_capture_pokemon_input::de_region(m1)?);
        input.build()?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn ser_capture_pokemon_http_response(
    #[allow(unused_variables)] output: crate::output::CapturePokemonOutput,
) -> std::result::Result<
    ::aws_smithy_http_server::response::Response,
    ::aws_smithy_http_server::protocol::rest_json_1::rejection::ResponseRejection,
> {
    Ok({
        #[allow(unused_mut)]
        let mut builder = ::http::Response::builder();
        builder = ::aws_smithy_http::header::set_response_header_if_absent(
            builder,
            ::http::header::CONTENT_TYPE,
            "application/vnd.amazon.eventstream",
        );
        let http_status: u16 = 200;
        builder = builder.status(http_status);
        let body =
            ::aws_smithy_http_server::body::boxed(::aws_smithy_http_server::body::wrap_stream({
                let error_marshaller =
                    crate::event_stream_serde::CapturePokemonEventsErrorMarshaller::new();
                let marshaller = crate::event_stream_serde::CapturePokemonEventsMarshaller::new();
                let signer = ::aws_smithy_eventstream::frame::NoOpSigner {};
                let adapter: ::aws_smithy_http::event_stream::MessageStreamAdapter<_, _> = output
                    .events
                    .into_body_stream(marshaller, error_marshaller, signer);
                adapter
            }));
        builder.body(body)?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn ser_capture_pokemon_http_error(
    error: &crate::error::CapturePokemonError,
) -> std::result::Result<
    ::aws_smithy_http_server::response::Response,
    ::aws_smithy_http_server::protocol::rest_json_1::rejection::ResponseRejection,
> {
    Ok({
        match error {
            crate::error::CapturePokemonError::UnsupportedRegionError(output) => {
                let payload = crate::protocol_serde::shape_unsupported_region_error::ser_unsupported_region_error_error(output)?;
                #[allow(unused_mut)]
                let mut builder = ::http::Response::builder();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_TYPE,
                    "application/vnd.amazon.eventstream",
                );
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::HeaderName::from_static("x-amzn-errortype"),
                    "UnsupportedRegionError",
                );
                let content_length = payload.len();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_LENGTH,
                    content_length,
                );
                builder
                    .status(500)
                    .body(::aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::CapturePokemonError::ThrottlingError(output) => {
                let payload =
                    crate::protocol_serde::shape_throttling_error::ser_throttling_error_error(
                        output,
                    )?;
                #[allow(unused_mut)]
                let mut builder = ::http::Response::builder();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_TYPE,
                    "application/vnd.amazon.eventstream",
                );
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::HeaderName::from_static("x-amzn-errortype"),
                    "ThrottlingError",
                );
                let content_length = payload.len();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_LENGTH,
                    content_length,
                );
                builder
                    .status(400)
                    .body(::aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::CapturePokemonError::ValidationException(output) => {
                let payload = crate::protocol_serde::shape_validation_exception::ser_validation_exception_error(output)?;
                #[allow(unused_mut)]
                let mut builder = ::http::Response::builder();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_TYPE,
                    "application/vnd.amazon.eventstream",
                );
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::HeaderName::from_static("x-amzn-errortype"),
                    "ValidationException",
                );
                let content_length = payload.len();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_LENGTH,
                    content_length,
                );
                builder
                    .status(400)
                    .body(::aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::CapturePokemonError::MasterBallUnsuccessful(output) => {
                let payload = crate::protocol_serde::shape_master_ball_unsuccessful::ser_master_ball_unsuccessful_error(output)?;
                #[allow(unused_mut)]
                let mut builder = ::http::Response::builder();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_TYPE,
                    "application/vnd.amazon.eventstream",
                );
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::HeaderName::from_static("x-amzn-errortype"),
                    "MasterBallUnsuccessful",
                );
                let content_length = payload.len();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_LENGTH,
                    content_length,
                );
                builder
                    .status(500)
                    .body(::aws_smithy_http_server::body::to_boxed(payload))?
            }
            crate::error::CapturePokemonError::InvalidPokeballError(output) => {
                let payload = crate::protocol_serde::shape_invalid_pokeball_error::ser_invalid_pokeball_error_error(output)?;
                #[allow(unused_mut)]
                let mut builder = ::http::Response::builder();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_TYPE,
                    "application/vnd.amazon.eventstream",
                );
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::HeaderName::from_static("x-amzn-errortype"),
                    "InvalidPokeballError",
                );
                let content_length = payload.len();
                builder = ::aws_smithy_http::header::set_response_header_if_absent(
                    builder,
                    ::http::header::CONTENT_LENGTH,
                    content_length,
                );
                builder
                    .status(400)
                    .body(::aws_smithy_http_server::body::to_boxed(payload))?
            }
        }
    })
}
