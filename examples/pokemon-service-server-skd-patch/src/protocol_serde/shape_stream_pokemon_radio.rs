// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub async fn de_stream_pokemon_radio_http_request<B>(
    #[allow(unused_variables)] request: ::http::Request<B>,
) -> std::result::Result<
    crate::input::StreamPokemonRadioInput,
    ::aws_smithy_http_server::protocol::rest_json_1::rejection::RequestRejection,
>
where
    B: ::aws_smithy_http_server::body::HttpBody + Send,
    B::Data: Send,
    ::aws_smithy_http_server::protocol::rest_json_1::rejection::RequestRejection:
        From<<B as ::aws_smithy_http_server::body::HttpBody>::Error>,
{
    Ok({
        #[allow(unused_mut)]
        let mut input = crate::input::stream_pokemon_radio_input::Builder::default();
        #[allow(unused_variables)]
        let ::aws_smithy_runtime_api::http::RequestParts {
            uri, headers, body, ..
        } = ::aws_smithy_runtime_api::http::Request::try_from(request)?.into_parts();
        ::aws_smithy_http_server::protocol::content_type_header_classifier_smithy(&headers, None)?;
        input.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn ser_stream_pokemon_radio_http_response(
    #[allow(unused_variables)] output: crate::output::StreamPokemonRadioOutput,
) -> std::result::Result<
    ::aws_smithy_http_server::response::Response,
    ::aws_smithy_http_server::protocol::rest_json_1::rejection::ResponseRejection,
> {
    Ok({
        #[allow(unused_mut)]
        let mut builder = ::http::Response::builder();
        builder = ::aws_smithy_http::header::set_response_header_if_absent(
            builder,
            ::http::header::CONTENT_TYPE,
            "application/octet-stream",
        );
        let http_status: u16 = 200;
        builder = builder.status(http_status);
        let body = ::aws_smithy_http_server::body::boxed(::aws_smithy_http_server::body::wrap_stream(
            ::aws_smithy_http::futures_stream_adapter::FuturesStreamCompatByteStream::new(
                crate::protocol_serde::shape_stream_pokemon_radio_output::ser_data_http_payload( output.data)?
            )
        ));
        builder.body(body)?
    })
}
