/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

import java.io.ByteArrayOutputStream
import java.util.Properties

plugins {
    id("smithy-rs.kotlin-conventions")
    id("smithy-rs.publishing-conventions")
}

description = "Common code generation logic for generating Rust code from Smithy models"
extra["displayName"] = "Smithy :: Rust :: CodegenCore"
extra["moduleName"] = "software.amazon.smithy.rust.codegen.core"

dependencies {
    implementation(kotlin("stdlib-jdk8"))
    implementation(libs.jsoup)
    api(libs.smithy.codegen.core)
    api(libs.toml4j)
    implementation(libs.jackson.dataformat.cbor)
    implementation(libs.smithy.aws.traits)
    implementation(libs.smithy.protocol.test.traits)
    implementation(libs.smithy.waiters)
    implementation(libs.smithy.protocol.traits)

    implementation(project(":rust-runtime"))
    testImplementation(libs.junit.jupiter)
    testImplementation(libs.kotest.assertions.core.jvm)
}

fun gitCommitHash(): String {
    // Use commit hash from env if provided, it is helpful to override commit hash in some contexts.
    // For example: while generating diff for generated SDKs we don't want to see version diff,
    // so we are overriding commit hash to something fixed
    val commitHashFromEnv = System.getenv("SMITHY_RS_VERSION_COMMIT_HASH_OVERRIDE")
    if (commitHashFromEnv != null) {
        return commitHashFromEnv
    }

    return try {
        val output = ByteArrayOutputStream()
        exec {
            commandLine = listOf("git", "rev-parse", "HEAD")
            standardOutput = output
        }
        output.toString().trim()
    } catch (ex: Exception) {
        "unknown"
    }
}

// Define the directory where the generated Kotlin file will be placed
val generatedSrcDir = layout.buildDirectory.dir("generated/src/main/kotlin")

sourceSets {
    main {
        kotlin {
            srcDir(generatedSrcDir)
        }
    }
}

val generateBuildEnvironmentConstants = tasks.register("generateBuildEnvironmentConstants") {
    // Specify that the task generates sources.
    val outputDir = generatedSrcDir.get().asFile
    outputs.dir(outputDir)

    doLast {
        // Load properties from `gradle.properties`.
        val properties = Properties()
        val gradlePropertiesFile = file("${rootDir}/gradle.properties")
        properties.load(gradlePropertiesFile.inputStream())

        val rustMsrv = properties.getProperty("rust.msrv")

        // Generate the Kotlin file.
        val generatedFile = file("$outputDir/BuildEnvironment.kt")
        generatedFile.writeText("""
            // This file is automatically generated. Do not modify manually.
            package software.amazon.smithy.rust.codegen.core.generated

            object BuildEnvironment {
                const val MSRV: String = "$rustMsrv"
                const val PROJECT_DIR: String = "${rootDir.invariantSeparatorsPath}"
            }
        """.trimIndent())
    }
}

val generateSmithyRuntimeCrateVersion by tasks.registering {
    // Generate the version of the runtime to use as a resource.
    // This keeps us from having to manually change version numbers in multiple places.
    val resourcesDir = layout.buildDirectory.dir("resources/main/software/amazon/smithy/rust/codegen/core")
    val versionsFile = resourcesDir.get().file("runtime-crate-versions.json")
    outputs.file(versionsFile)

    val stableCrateVersion = project.properties["smithy.rs.runtime.crate.stable.version"].toString()
    val unstableCrateVersion = project.properties["smithy.rs.runtime.crate.unstable.version"].toString()
    inputs.property("stableCrateVersion", stableCrateVersion)
    inputs.property("unstableCrateVersion", stableCrateVersion)

    val cargoTomls = mutableListOf<File>()
    for (runtimePath in arrayOf("../rust-runtime", "../aws/rust-runtime")) {
        for (path in project.projectDir.resolve(runtimePath).listFiles()!!) {
            val manifestPath = path.resolve("Cargo.toml")
            if (manifestPath.exists()) {
                cargoTomls.add(manifestPath)
                inputs.file(manifestPath)
            }
        }
    }

    sourceSets.main.get().output.dir(resourcesDir)
    doLast {
        // Version format must be kept in sync with `software.amazon.smithy.rust.codegen.core.Version`
        versionsFile.asFile.writeText(
            StringBuilder().append("{\n").also { json ->
                fun StringBuilder.keyVal(key: String, value: String) = append("\"$key\": \"$value\"")

                json.append("  ").keyVal("gitHash", gitCommitHash()).append(",\n")
                json.append("  \"runtimeCrates\": {\n")
                json.append(
                    cargoTomls.map { path ->
                        path.parentFile.name to path.readLines()
                    }
                        .filter { (name, manifestLines) ->
                            val publish = manifestLines.none { line -> line == "publish = false" }
                            // HACK: The experimental/unpublished typescript runtime crate needs
                            // to be included since it is referenced by the code generator and tested in CI.
                            publish || name == "aws-smithy-http-server-typescript"
                        }
                        .map { (name, manifestLines) ->
                            val stable = manifestLines.any { line -> line == "stable = true" }
                            val versionLine = manifestLines.first { line -> line.startsWith("version = \"") }
                            val maybeVersion = versionLine.slice(("version = \"".length)..(versionLine.length - 2))
                            val version = if (maybeVersion == "0.0.0-smithy-rs-head") {
                                when (stable) {
                                    true -> stableCrateVersion
                                    else -> unstableCrateVersion
                                }
                            } else {
                                maybeVersion
                            }
                            "    \"$name\": \"$version\""
                        }
                        .joinToString(",\n"),
                )
                json.append("  }\n")
            }.append("}").toString(),
        )
    }
}


tasks.compileKotlin {
    dependsOn(generateSmithyRuntimeCrateVersion)
    dependsOn(generateBuildEnvironmentConstants)
}

tasks.named("sourcesJar").configure {
    dependsOn(generateSmithyRuntimeCrateVersion)
    dependsOn(generateBuildEnvironmentConstants)
}
